"Timestamp","How large is your organization?","What industry do you work in?","What type of team do to work on?","How well do you understand Prometheus? [Libraries]","How well do you understand Prometheus? [Formats]","How well do you understand Prometheus? [Server configuration]","How well do you understand Prometheus? [PromQL]","How familiar are you with OpenTelemetry? [Libraries]","How familiar are you with OpenTelemetry? [OTLP]","How familiar are you with OpenTelemetry? [Collector]","How familiar are you with OpenTelemetry? [Operator]","Which of the following instrumentation libraries or tools are you using (select all that apply):","Which of the following OpenTelemetry components are you using to deliver metrics to your backend (select all that apply):","Which of the following are you using to store metrics (select all that apply):","Which query language are you using to query metrics (select all that apply):","Which of these have you done in the past 6 months (select all that apply):","How easy have you found it to use OpenTelemetry with Prometheus?","How confusing have you found the translation between OpenTelemetry metrics and Prometheus metrics?","What have been the biggest challenges you’ve faced using OpenTelemetry with Prometheus?","What would you like to see changed or improved with OpenTelemetry’s Prometheus support?","OpenTelemetry defines the HTTP server histogram metric as http.server.request.duration, with a unit of seconds (s). Suppose you are writing a query for the 95th percentile of the same HTTP metric. Which of the following would you expect to write (regardless of what is valid/correct today), (select all that apply):","Suppose you’ve defined your own OpenTelemetry metric in Go to track how far your robot has traveled:

counter, _ := meter.Float64ObservableCounter(""robot.distance.traveled"",
       metric.WithUnit(""mm"")
   )
   // Call counter.Add() each time the robot moves.

Which of the following would you expect to write (regardless of what is valid/correct today), (select all that apply):","Imagine you know that your node’s OpenTelemetry instrumentation defines a node.time metric, but you don’t remember its unit. Someone complains about a flaky alert, so you open a YAML file with your alert configuration. Which of the following you prefer the most (select all that apply):","Which of the following describes your opinion on units in metric names (select one):","Which of the following describes your opinion on dots vs underscores in metric names (select one):"
"2024/05/01 9:23:58 AM AST",">1,000","Technology","DevOps","Expert","Expert","Expert","Expert","Expert","Expert","Expert","Expert","Prometheus Client Libraries;Prometheus exporters (e.g. node_exporter);OpenTelemetry Trace Client Libraries","Prometheus Client OTLP export.","The Prometheus Server;An open-source prometheus backend (Thanos, Cortex, Grafana Mimir, etc.)","PromQL","Added a metric to an application;Configured collection or routing of metrics;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert;Created or edited a recording rule","3","3","We don't use OpenTelemetry to handle metrics. We don't see much benefit adding OTel Collector into the metrics handling pipeline.","Nothing.","histogram_quantile(0.95, rate(http_server_request_duration_seconds_bucket[5m]))","rate(robot_distance_traveled_millimeters_total[5m])","expr: timestamp(node_time_nanoseconds) - (1e-9 * node_time_nanoseconds) >  5","I don’t care, but just don’t break whatever the current behavior is.","I don’t care, but don’t break whatever the current behavior is."
"2024/05/01 9:46:13 AM AST","0-50","Technology","DevOps","Expert","Expert","Expert","Expert","Somewhat familiar","Somewhat familiar","Expert","Somewhat familiar","Prometheus Client Libraries;Prometheus exporters (e.g. node_exporter);OpenTelemetry Metric Client Libraries;OpenTelemetry Trace Client Libraries","OpenTelemetry Collector Prometheus receiver","A Prometheus-compatible (or PromQL compatible) solution from a vendor","PromQL;A vendor-specific query language (specify what under Other);Google's MQL","Added a metric to an application;Configured collection or routing of metrics;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert","1","4","Stability of the OpenTelemetry instrumentation libraries has been a major pain point with several breaking changes with some curious omissions (e.g. simple gauge support disapeared for a while)","Stabilised API","histogram_quantile(0.95, rate({""http.server.request.duration_seconds_bucket""}[5m]));histogram_quantile(0.95, rate(http_server_request_duration_seconds_bucket[5m]))","rate({""robot.distance.traveled_millimeters_total""}[5m]);rate(robot_distance_traveled_millimeters_total[5m])","expr: timestamp(node_time_nanoseconds) - (1e-9 * node_time_nanoseconds) >  5;expr: timestamp({""node.time_nanoseconds""}) - (1e-9 * {""node.time_nanoseconds""}) >  5","Units should be required to be part of the metric name. Without them, it is hard to write proper queries, write or read alerts e.g. in YAML, and build dashboards.","I like the dots better, and am glad OpenTelemetry chose to use them in metric names, let’s make sure dots works better in Prometheus"
"2024/05/01 10:53:52 AM AST","100-1,000","Technology","Dev","Somewhat familiar","Not at all familiar","Not at all familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Prometheus exporters (e.g. node_exporter);OpenTelemetry Metric Client Libraries;OpenTelemetry auto-instrumentation agents","OpenTelemetry Language SDK Prometheus exporters;Prometheus Server OTLP ingestion","The Prometheus Server;An open-source prometheus backend (Thanos, Cortex, Grafana Mimir, etc.)","PromQL","Added a metric to an application;Configured collection or routing of metrics;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics","2","2","Metric names/labels changing ","N/A","histogram_quantile(0.95, rate({""http.server.request.duration_seconds""}[5m]));histogram_quantile(0.95, rate({""http.server.request.duration_seconds_bucket""}[5m]));histogram_quantile(0.95, rate(http_server_request_duration_seconds_bucket[5m]))","rate({""robot.distance.traveled_millimeters""}[5m]);rate({""robot.distance.traveled_millimeters_total""}[5m]);rate(robot_distance_traveled_millimeters_total[5m])","expr: timestamp(node_time_nanoseconds) - (1e-9 * node_time_nanoseconds) >  5;expr: timestamp({""node.time_nanoseconds""}) - (1e-9 * {""node.time_nanoseconds""}) >  5","We should recommend adding units to metric names, for the reasons above, but let users decide if they should add them or not.","I don’t care, but don’t break whatever the current behavior is."
"2024/05/01 11:04:37 AM AST",">1,000","Vehicle industry","Platform engineering","Somewhat familiar","Expert","Somewhat familiar","Expert","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Prometheus Client Libraries;Prometheus exporters (e.g. node_exporter);OpenTelemetry Metric Client Libraries;OpenTelemetry Trace Client Libraries","Prometheus Client OTLP export.;Prometheus Server OTLP ingestion","The Prometheus Server;A backend not associated with Prometheus, not compatible with PromQL","PromQL;A vendor-specific query language (specify what under Other)","Added a metric to an application;Configured collection or routing of metrics;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert;Created or edited a recording rule","4","3","To understand difference","Not sure ","histogram_quantile(0.95, rate({""http.server.request.duration_seconds""}[5m]));histogram_quantile(0.95, rate({""http.server.request.duration_seconds_bucket""}[5m]));histogram_quantile(0.95, rate(http_server_request_duration_seconds_bucket[5m]))","rate(robot_distance_traveled_millimeters_total[5m])","expr: timestamp(node_time) - (1e-9 * node_time) >  5;expr: timestamp({""node.time""}) - (1e-9 * {""node.time""}) >  5","Units should be required to be part of the metric name. Without them, it is hard to write proper queries, write or read alerts e.g. in YAML, and build dashboards.","All dots should be changed to underscores when translating to Prometheus. That way, metric names match the format used by the rest of the Prometheus ecosystem."
"2024/05/01 11:37:40 AM AST","0-50","Technology","Platform engineering","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Prometheus Client Libraries;OpenTelemetry Metric Client Libraries;OpenTelemetry Trace Client Libraries","OpenTelemetry Language SDK Prometheus exporters;OpenTelemetry Collector Prometheus receiver;OpenTelemetry Collector Prometheus exporter","An open-source prometheus backend (Thanos, Cortex, Grafana Mimir, etc.);A Prometheus-compatible (or PromQL compatible) solution from a vendor;A backend not associated with Prometheus, not compatible with PromQL","PromQL;A vendor-specific query language (specify what under Other);MQL (GCP)","Added a metric to an application;Created or edited a dashboard for displaying metrics","2","4","out of the box seamless integration","Improve docs to avoid confusion using push pull metrics receiver/exporters in collectors ","histogram_quantile(0.95, rate({""http.server.request.duration_seconds""}[5m]));histogram_quantile(0.95, rate({""http.server.request.duration_seconds_bucket""}[5m]))","rate({""robot.distance.traveled_millimeters""}[5m]);rate({""robot.distance.traveled_millimeters_total""}[5m])","expr: timestamp({""node.time_nanoseconds""}) - (1e-9 * {""node.time_nanoseconds""}) >  5","We should recommend adding units to metric names, for the reasons above, but let users decide if they should add them or not.","I like the dots better, and am glad OpenTelemetry chose to use them in metric names, let’s make sure dots works better in Prometheus"
"2024/05/01 11:43:17 AM AST",">1,000","Technology","Observability","Expert","Expert","Expert","Expert","Not at all familiar","Not at all familiar","Not at all familiar","Not at all familiar","Prometheus Client Libraries;Prometheus exporters (e.g. node_exporter)","OpenTelemetry Collector Prometheus receiver","The Prometheus Server;An open-source prometheus backend (Thanos, Cortex, Grafana Mimir, etc.)","PromQL","Added a metric to an application;Configured collection or routing of metrics;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert;Created or edited a recording rule","5","5","I don’t have any need to use OTel with Prometheus ","I don’t enjoy the idea of OTel forcing changes in PromQL and making it all complicated for non OTel users like me","histogram_quantile(0.95, rate(http_server_request_duration_seconds_bucket[5m]))","rate(robot_distance_traveled_millimeters_total[5m])","expr: timestamp(node_time_nanoseconds) - (1e-9 * node_time_nanoseconds) >  5","Units should generally not be added to metric names, but base units (seconds, meters, etc.) should be required.","All dots should be changed to underscores when translating to Prometheus. That way, metric names match the format used by the rest of the Prometheus ecosystem."
"2024/05/01 11:51:54 AM AST",">1,000","Financial","Observability","Expert","Expert","Expert","Expert","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Prometheus Client Libraries;Prometheus exporters (e.g. node_exporter);OpenTelemetry Metric Client Libraries;OpenTelemetry auto-instrumentation agents","OpenTelemetry Collector Prometheus exporter;Prometheus Client OTLP export.","An open-source prometheus backend (Thanos, Cortex, Grafana Mimir, etc.)","PromQL","Added a metric to an application;Configured collection or routing of metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert;Created or edited a recording rule","2","3","None.","Even more auto-instrumentation","histogram_quantile(0.95, rate({""http.server.request.duration_seconds""}[5m]))","rate({""robot.distance.traveled_total""}[5m])","expr: timestamp(node_time_nanoseconds) - (1e-9 * node_time_nanoseconds) >  5","Units should be required to be part of the metric name. Without them, it is hard to write proper queries, write or read alerts e.g. in YAML, and build dashboards.","I wish OpenTelemetry had chosen to use underscores to match Prometheus syntactic requirements, I believe this decision should be revisited, it’s worth the time and breaking existing OTel users."
"2024/05/01 12:55:51 PM AST","50-100","Hospitality","DevOps","Expert","Expert","Somewhat familiar","Expert","Expert","Somewhat familiar","Expert","Expert","Prometheus Client Libraries;Prometheus exporters (e.g. node_exporter);OpenTelemetry Metric Client Libraries;OpenTelemetry Trace Client Libraries;OpenTelemetry auto-instrumentation agents","OpenTelemetry Language SDK Prometheus exporters;OpenTelemetry Language SDK Prometheus bridges;OpenTelemetry Collector Prometheus exporter;Prometheus Client OTLP export.","The Prometheus Server","PromQL","Added a metric to an application;Configured collection or routing of metrics;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert","2","3","Controlling the size of histogram buckets, moving from scraping -> pushing over OTLP","Honestly not sure, sorry! After 7ish years in this space, I’m starting to feel like Prometheus itself is simply too user hostile to be the industry’s de facto metrics tool.","histogram_quantile(0.95, rate({""http.server.request.duration_seconds_bucket""}[5m]));histogram_quantile(0.95, rate(http_server_request_duration_seconds_bucket[5m]))","rate({""robot.distance.traveled_millimeters_total""}[5m]);rate(robot_distance_traveled_millimeters_total[5m])","expr: timestamp(node_time_nanoseconds) - (1e-9 * node_time_nanoseconds) >  5;expr: timestamp({""node.time_nanoseconds""}) - (1e-9 * {""node.time_nanoseconds""}) >  5","Units should generally not be added to metric names, but base units (seconds, meters, etc.) should be required.","I wish OpenTelemetry had chosen to use underscores to match Prometheus syntactic requirements, I believe this decision should be revisited, it’s worth the time and breaking existing OTel users."
"2024/05/01 1:05:11 PM AST",">1,000","Financial","Observability","Expert","Expert","Expert","Somewhat familiar","Expert","Expert","Expert","Expert","Prometheus Client Libraries;Prometheus exporters (e.g. node_exporter);OpenTelemetry Metric Client Libraries;OpenTelemetry Trace Client Libraries;OpenTelemetry auto-instrumentation agents","OpenTelemetry Language SDK Prometheus exporters;OpenTelemetry Collector Prometheus receiver;OpenTelemetry Collector Simple Prometheus receiver;OpenTelemetry Collector Prometheus exporter","A Prometheus-compatible (or PromQL compatible) solution from a vendor","A vendor-specific query language (specify what under Other);A different open source query language (specify what under Other)","Added a metric to an application;Configured collection or routing of metrics;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert;Created or edited a recording rule","2","3","As of now it is working as expected ","N/A","histogram_quantile(0.95, rate({""http.server.request.duration""}[5m]));histogram_quantile(0.95, rate({""http.server.request.duration_seconds""}[5m]));histogram_quantile(0.95, rate(http_server_request_duration_seconds_bucket[5m]))","rate({""robot.distance.traveled""}[5m]);rate({""robot.distance.traveled_millimeters""}[5m]);rate({""robot.distance.traveled_millimeters_total""}[5m]);rate(robot_distance_traveled_millimeters_total[5m])","expr: timestamp(node_time_nanoseconds) - (1e-9 * node_time_nanoseconds) >  5;expr: timestamp({""node.time_nanoseconds""}) - (1e-9 * {""node.time_nanoseconds""}) >  5","Units should be required to be part of the metric name. Without them, it is hard to write proper queries, write or read alerts e.g. in YAML, and build dashboards.","I don’t care, but don’t break whatever the current behavior is."
"2024/05/01 1:10:11 PM AST",">1,000","Technology","DevOps","Expert","Expert","Expert","Expert","Expert","Expert","Expert","Expert","Prometheus Client Libraries;OpenTelemetry Metric Client Libraries;OpenTelemetry Trace Client Libraries;OpenTelemetry auto-instrumentation agents","OpenTelemetry Collector Prometheus receiver;OpenTelemetry Collector Prometheus remote write exporter","An open-source prometheus backend (Thanos, Cortex, Grafana Mimir, etc.)","PromQL","Added a metric to an application;Configured collection or routing of metrics;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert;Created or edited a recording rule","1","1","Metrics storage ","Add RUM for frontend and mobile apps ","histogram_quantile(0.95, rate({""http.server.request.duration_bucket""}[5m]))","rate({""robot.distance.traveled""}[5m]);rate({""robot.distance.traveled_total""}[5m]);rate(robot_distance_traveled_millimeters_total[5m])","expr: timestamp(node_time_nanoseconds) - (1e-9 * node_time_nanoseconds) >  5","We should recommend adding units to metric names, for the reasons above, but let users decide if they should add them or not.","All dots should be changed to underscores when translating to Prometheus. That way, metric names match the format used by the rest of the Prometheus ecosystem."
"2024/05/01 1:29:14 PM AST",">1,000","Technology","SRE","Not at all familiar","Expert","Not at all familiar","Somewhat familiar","Somewhat familiar","Expert","Expert","Not at all familiar","OpenTelemetry Metric Client Libraries;OpenTelemetry Trace Client Libraries;OpenTelemetry auto-instrumentation agents","OpenTelemetry Collector Prometheus receiver","A backend not associated with Prometheus, not compatible with PromQL","A different open source query language (specify what under Other);ekasticsearch/lucene query","Added a metric to an application;Configured collection or routing of metrics;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert","3","4","resource attributes,  time ordering with queue buffering,  semconv","resource attributes,  time ordering with queue buffering,  semconv","histogram_quantile(0.95, rate({""http.server.request.duration_seconds""}[5m]))","rate({""robot.distance.traveled_millimeters""}[5m])","expr: timestamp(node_time_nanoseconds) - (1e-9 * node_time_nanoseconds) >  5;expr: timestamp({""node.time_nanoseconds""}) - (1e-9 * {""node.time_nanoseconds""}) >  5","Units should be required to be part of the metric name. Without them, it is hard to write proper queries, write or read alerts e.g. in YAML, and build dashboards.","I like the dots better, and am glad OpenTelemetry chose to use them in metric names, let’s make sure dots works better in Prometheus"
"2024/05/01 2:20:46 PM AST","0-50","Technology","Observability","Somewhat familiar","Expert","Somewhat familiar","Expert","Expert","Expert","Expert","Somewhat familiar","Prometheus exporters (e.g. node_exporter);OpenTelemetry Metric Client Libraries;OpenTelemetry Trace Client Libraries;OpenTelemetry auto-instrumentation agents","OpenTelemetry Collector Prometheus receiver;OpenTelemetry Collector Simple Prometheus receiver;OpenTelemetry Collector Prometheus exporter","The Prometheus Server;A Prometheus-compatible (or PromQL compatible) solution from a vendor","PromQL","Added a metric to an application;Configured collection or routing of metrics;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert","3","3","- Differences in metric semantics
- Lack of a notion of resource in Prometheus and the workarounds necessary.
- Not full UTF8 support for metric keys and labels.
- The necessity for suffixes on OTel metrics in Prometheus impedes usability ","OTel's richer semantics are very much appreciated. Having to boils this down to fewer semantics feels wrong and adds usage complexity. I have no proposal that would address this shortcoming, but not forcing awareness of this on end-users would be great.","histogram_quantile(0.95, rate({""http.server.request.duration""}[5m]));histogram_quantile(0.95, rate({""http.server.request.duration_seconds""}[5m]))","rate({""robot.distance.traveled""}[5m]);rate({""robot.distance.traveled_millimeters""}[5m])","expr: timestamp({""node.time""}) - (1e-9 * {""node.time""}) >  5;expr: timestamp({""node.time_nanoseconds""}) - (1e-9 * {""node.time_nanoseconds""}) >  5","We should recommend adding units to metric names, for the reasons above, but let users decide if they should add them or not.","I like the dots better, and am glad OpenTelemetry chose to use them in metric names, let’s make sure dots works better in Prometheus"
"2024/05/01 4:35:29 PM AST",">1,000","Technology","Platform engineering","Expert","Expert","Expert","Expert","Expert","Somewhat familiar","Expert","Not at all familiar","OpenTelemetry Metric Client Libraries;OpenTelemetry Trace Client Libraries","OpenTelemetry Collector Prometheus exporter;OpenTelemetry Collector Prometheus remote write exporter;Prometheus Server OTLP ingestion","An open-source prometheus backend (Thanos, Cortex, Grafana Mimir, etc.);A Prometheus-compatible (or PromQL compatible) solution from a vendor","PromQL;A different open source query language (specify what under Other);MetricsQL","Added a metric to an application;Configured collection or routing of metrics;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert","3","3","The dot vs underscore namespace syntax and different semconv","prometheus has to improve and support otel semconv","histogram_quantile(0.95, rate({""http.server.request.duration""}[5m]));histogram_quantile(0.95, rate({""http.server.request.duration_bucket""}[5m]))","rate({""robot.distance.traveled""}[5m])","expr: timestamp({""node.time""}) - (1e-9 * {""node.time""}) >  5","Units should generally not be added to metric names. Instead, units should be separate metadata, like the metric description. If you need to know the units for queries in alerts and dashboards, you will go look them up.","I like the dots better, and am glad OpenTelemetry chose to use them in metric names, let’s make sure dots works better in Prometheus"
"2024/05/02 3:24:08 AM AST","0-50","Technology","DevOps","Somewhat familiar","Somewhat familiar","Not at all familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Not at all familiar","Prometheus Client Libraries;Prometheus exporters (e.g. node_exporter);OpenTelemetry Metric Client Libraries;OpenTelemetry Trace Client Libraries","OpenTelemetry Language SDK Prometheus exporters;OpenTelemetry Collector Prometheus receiver;OpenTelemetry Collector Prometheus exporter;Prometheus Client OTLP export.","The Prometheus Server","PromQL","Added a metric to an application;Configured collection or routing of metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert","2","4","no","support Delta temporality ","histogram_quantile(0.95, rate(http_server_request_duration_seconds_bucket[5m]))","rate(robot_distance_traveled_millimeters_total[5m])","expr: timestamp(node_time_nanoseconds) - (1e-9 * node_time_nanoseconds) >  5","We should recommend adding units to metric names, for the reasons above, but let users decide if they should add them or not.","I like the dots better, and am glad OpenTelemetry chose to use them in metric names, let’s make sure dots works better in Prometheus"
"2024/05/02 7:25:09 AM AST","100-1,000","Technology","Platform engineering","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Prometheus Client Libraries;Prometheus exporters (e.g. node_exporter);OpenTelemetry Metric Client Libraries","OpenTelemetry Collector Prometheus receiver;OpenTelemetry Collector Prometheus remote write exporter","An open-source prometheus backend (Thanos, Cortex, Grafana Mimir, etc.)","SQL","Configured collection or routing of metrics;Created or edited a dashboard for displaying metrics;Created or edited a recording rule","3","4","Dint find istio compatibility or ingesting service mesh data","if it can have more interconnectivity like recording rules ","histogram_quantile(0.95, rate({""http.server.request.duration""}[5m]));histogram_quantile(0.95, rate(http_server_request_duration_seconds_bucket[5m]))","rate({""robot.distance.traveled""}[5m]);rate(robot_distance_traveled_millimeters_total[5m])","expr: timestamp(node_time_nanoseconds) - (1e-9 * node_time_nanoseconds) >  5","We should recommend adding units to metric names, for the reasons above, but let users decide if they should add them or not.","All dots should be changed to underscores when translating to Prometheus. That way, metric names match the format used by the rest of the Prometheus ecosystem."
"2024/05/02 7:48:47 AM AST","0-50","Technology","Dev","Expert","Expert","Expert","Expert","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Prometheus Client Libraries;Prometheus exporters (e.g. node_exporter);OpenTelemetry Trace Client Libraries","OpenTelemetry Language SDK Prometheus exporters","The Prometheus Server","PromQL","Added a metric to an application;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert;Created or edited a recording rule","3","5","The Otel instrumentation libraries are so crazy complicated, I just want to use Prometheus' instrumentation library.","Reverse support, eg. drop in support for the Prometheus library, and do everything the way Prometheus would but be able to take advantage of ""the good parts"" of otel, which is just to say a standardized wire protocol.","histogram_quantile(0.95, rate(http_server_request_duration_seconds_bucket[5m]))","rate(robot_distance_traveled_millimeters_total[5m])","expr: timestamp({""node.time_nanoseconds""}) - (1e-9 * {""node.time_nanoseconds""}) >  5","Units should be required to be part of the metric name. Without them, it is hard to write proper queries, write or read alerts e.g. in YAML, and build dashboards.","I wish OpenTelemetry had chosen to use underscores to match Prometheus syntactic requirements, I believe this decision should be revisited, it’s worth the time and breaking existing OTel users."
"2024/05/02 7:50:16 AM AST",">1,000","gaming","Dev","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Prometheus Client Libraries;Prometheus exporters (e.g. node_exporter);OpenTelemetry Trace Client Libraries","OpenTelemetry Collector Prometheus receiver;OpenTelemetry Collector Prometheus remote write exporter","The Prometheus Server;An open-source prometheus backend (Thanos, Cortex, Grafana Mimir, etc.);A Prometheus-compatible (or PromQL compatible) solution from a vendor","PromQL","Added a metric to an application;Configured collection or routing of metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert","3","4","different naming conventions"," adopt the same naming convention","histogram_quantile(0.95, rate({""http.server.request.duration""}[5m]))","rate({""robot.distance.traveled""}[5m])","expr: timestamp({""node.time""}) - (1e-9 * {""node.time""}) >  5","We should recommend adding units to metric names, for the reasons above, but let users decide if they should add them or not.","I wish OpenTelemetry had chosen to use underscores to match Prometheus syntactic requirements, I believe this decision should be revisited, it’s worth the time and breaking existing OTel users."
"2024/05/02 10:48:02 AM AST",">1,000","Travel and Leisure","Platform engineering","Somewhat familiar","Somewhat familiar","Expert","Somewhat familiar","Not at all familiar","Somewhat familiar","Expert","Not at all familiar","Prometheus exporters (e.g. node_exporter);OpenTelemetry Trace Client Libraries;OpenTelemetry auto-instrumentation agents","OpenTelemetry Collector Prometheus remote write exporter","The Prometheus Server;An open-source prometheus backend (Thanos, Cortex, Grafana Mimir, etc.)","PromQL","Added a metric to an application;Configured collection or routing of metrics;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert","3","5","usage of Out of Order time window  as opentelemetry data are not ordered","""Pairing"" of metrics and traces to be able to debug issues","histogram_quantile(0.95, rate({""http.server.request.duration_seconds""}[5m]))","rate({""robot.distance.traveled_millimeters""}[5m])","expr: timestamp(node_time_nanoseconds) - (1e-9 * node_time_nanoseconds) >  5","We should recommend adding units to metric names, for the reasons above, but let users decide if they should add them or not.","I don’t care, but don’t break whatever the current behavior is."
"2024/05/02 11:18:01 AM AST",">1,000","Technology","Observability","Somewhat familiar","Expert","Somewhat familiar","Expert","Somewhat familiar","Somewhat familiar","Expert","Expert","Prometheus Client Libraries;Prometheus exporters (e.g. node_exporter);OpenTelemetry Metric Client Libraries;OpenTelemetry Trace Client Libraries;OpenTelemetry auto-instrumentation agents","OpenTelemetry Collector Prometheus remote write exporter","An open-source prometheus backend (Thanos, Cortex, Grafana Mimir, etc.);A backend not associated with Prometheus, not compatible with PromQL","PromQL;A vendor-specific query language (specify what under Other);Cloudwatch metrics","Added a metric to an application;Configured collection or routing of metrics;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics","3","4","unexpected metric name modification","Prometheus to natively support opentelemetry semantic conventions","histogram_quantile(0.95, rate({""http.server.request.duration""}[5m]))","rate({""robot.distance.traveled""}[5m])","expr: timestamp(node_time) - (1e-9 * node_time) >  5","Units should generally not be added to metric names. Instead, units should be separate metadata, like the metric description. If you need to know the units for queries in alerts and dashboards, you will go look them up.","I like the dots better, and am glad OpenTelemetry chose to use them in metric names, let’s make sure dots works better in Prometheus"
"2024/05/02 2:28:34 PM AST",">1,000","Technology","Observability","Expert","Expert","Expert","Expert","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Prometheus Client Libraries;Prometheus exporters (e.g. node_exporter);OpenTelemetry Trace Client Libraries","Prometheus Client OTLP export.","The Prometheus Server;An open-source prometheus backend (Thanos, Cortex, Grafana Mimir, etc.)","PromQL","Added a metric to an application;Configured collection or routing of metrics;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert;Created or edited a recording rule","5","5","N/A","N/A","histogram_quantile(0.95, rate(http_server_request_duration_seconds_bucket[5m]))","rate(robot_distance_traveled_millimeters_total[5m])","expr: timestamp(node_time) - (1e-9 * node_time) >  5","We should recommend adding units to metric names, for the reasons above, but let users decide if they should add them or not.","All dots should be changed to underscores when translating to Prometheus. That way, metric names match the format used by the rest of the Prometheus ecosystem."
"2024/05/02 10:08:50 PM AST",">1,000","Technology","Observability","Somewhat familiar","Somewhat familiar","Somewhat familiar","Expert","Somewhat familiar","Somewhat familiar","Expert","Expert","Prometheus Client Libraries;Prometheus exporters (e.g. node_exporter);OpenTelemetry Metric Client Libraries;OpenTelemetry Trace Client Libraries","OpenTelemetry Collector Prometheus receiver;OpenTelemetry Collector Prometheus exporter;Prometheus Client OTLP export.;Prometheus Server OTLP ingestion","The Prometheus Server;An open-source prometheus backend (Thanos, Cortex, Grafana Mimir, etc.);A backend not associated with Prometheus, not compatible with PromQL","PromQL;SQL","Added a metric to an application;Configured collection or routing of metrics;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert;Created or edited a recording rule","2","3","1. The default fields conversion from Prometheus metrics to OTLP (service.instance.id, etc.)
2. understanding Resource, Metrics, DataPoints and how prometheusreceiver converts it into","there should be an option in prometheusreceiver to not convert duplicate labels (e.g. job to exported_job, instance to exported_instance)","histogram_quantile(0.95, rate(http_server_request_duration_bucket[5m]));histogram_quantile(0.95, rate(http_server_request_duration_seconds_bucket[5m]))","rate(robot_distance_traveled[5m]);rate(robot_distance_traveled_millimeters_total[5m])","expr: timestamp(node_time) - (1e-9 * node_time) >  5;expr: timestamp(node_time_nanoseconds) - (1e-9 * node_time_nanoseconds) >  5","Units should be required to be part of the metric name. Without them, it is hard to write proper queries, write or read alerts e.g. in YAML, and build dashboards.","I like the dots better, and am glad OpenTelemetry chose to use them in metric names, let’s make sure dots works better in Prometheus"
"2024/05/03 12:15:01 AM AST","100-1,000","Technology","Dev","Somewhat familiar","Expert","Expert","Somewhat familiar","Somewhat familiar","Somewhat familiar","Expert","Expert","Prometheus Client Libraries;Prometheus exporters (e.g. node_exporter);OpenTelemetry auto-instrumentation agents","None of the Above","The Prometheus Server;An open-source prometheus backend (Thanos, Cortex, Grafana Mimir, etc.);A Prometheus-compatible (or PromQL compatible) solution from a vendor","PromQL","Added a metric to an application;Configured collection or routing of metrics;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert","4","3","..","..","histogram_quantile(0.95, rate({""http.server.request.duration""}[5m]));histogram_quantile(0.95, rate({""http.server.request.duration_seconds""}[5m]))","rate({""robot.distance.traveled""}[5m]);rate({""robot.distance.traveled_millimeters""}[5m])","expr: timestamp({""node.time""}) - (1e-9 * {""node.time""}) >  5","Units should generally not be added to metric names. Instead, units should be separate metadata, like the metric description. If you need to know the units for queries in alerts and dashboards, you will go look them up.","I like the dots better, and am glad OpenTelemetry chose to use them in metric names, let’s make sure dots works better in Prometheus"
"2024/05/03 10:56:45 AM AST","100-1,000","Technology","SRE","Not at all familiar","Not at all familiar","Expert","Expert","Not at all familiar","Somewhat familiar","Somewhat familiar","Not at all familiar","Prometheus exporters (e.g. node_exporter);OpenTelemetry auto-instrumentation agents","OpenTelemetry Collector Prometheus receiver;OpenTelemetry Collector Prometheus exporter;OpenTelemetry Collector Prometheus remote write exporter;Prometheus Client OTLP export.;Prometheus Server OTLP ingestion","The Prometheus Server;An open-source prometheus backend (Thanos, Cortex, Grafana Mimir, etc.)","PromQL","Added a metric to an application;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert","2","2","none","none","histogram_quantile(0.95, rate({""http.server.request.duration""}[5m]));histogram_quantile(0.95, rate({""http.server.request.duration_seconds""}[5m]));histogram_quantile(0.95, rate({""http.server.request.duration_bucket""}[5m]))","rate({""robot.distance.traveled_millimeters_total""}[5m])","expr: timestamp(node_time) - (1e-9 * node_time) >  5;expr: timestamp(node_time_nanoseconds) - (1e-9 * node_time_nanoseconds) >  5","Units should be required to be part of the metric name. Without them, it is hard to write proper queries, write or read alerts e.g. in YAML, and build dashboards.","All dots should be changed to underscores when translating to Prometheus. That way, metric names match the format used by the rest of the Prometheus ecosystem."
"2024/05/03 11:33:02 AM AST",">1,000","Ad Tech","Observability","Expert","Expert","Expert","Expert","Expert","Expert","Expert","Expert","Prometheus Client Libraries;Prometheus exporters (e.g. node_exporter);OpenTelemetry Metric Client Libraries;OpenTelemetry Trace Client Libraries;OpenTelemetry auto-instrumentation agents;Pushgateway, Mimir, VictoriaMetrics","OpenTelemetry Language SDK Prometheus exporters","An open-source prometheus backend (Thanos, Cortex, Grafana Mimir, etc.)","PromQL","Added a metric to an application;Configured collection or routing of metrics;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert;Created or edited a recording rule","4","4","Performance of the OpenTelemetry Collector does not scale.
It's not possible to create automatic aggregation rules based on the type of instrument or by using annotations in the code.
Cardinality due to the exessive amount of metrics generated by most HTTP instrumentation (ASPNETCORE) as sparse/native histogram are still not a thing having one histogram per route per status code is insanely costly to store by default.
Metrics do strings and unit are still far from being well supported.
","Keep the pull model it's good for discovery, maybe with a constantly opened connection though (reverse push) for performance and streaming updates, gRPC style.
Better support for sparse/native histogram, cheap with good buckets boundaries.
Make it easy to define how to aggregate the metrics from the language.
Propagate metrics doc strings and unit into some kind of useful available in Grafana. (automatic panel units) 
Enrich PromQL query language, it's very hard to explain to users that you can't do even basic transformations without having to rely on what looks like language hacks.","histogram_quantile(0.95, rate(http_server_request_duration_bucket[5m]))","rate(robot_distance_traveled[5m])","expr: timestamp(node_time) - (1e-9 * node_time) >  5","Units should generally not be added to metric names. Instead, units should be separate metadata, like the metric description. If you need to know the units for queries in alerts and dashboards, you will go look them up.","I like the dots better, and am glad OpenTelemetry chose to use them in metric names, let’s make sure dots works better in Prometheus"
"2024/05/04 1:31:26 AM AST","0-50","Technology","Dev","Somewhat familiar","Somewhat familiar","Somewhat familiar","Not at all familiar","Somewhat familiar","Not at all familiar","Somewhat familiar","Not at all familiar","Prometheus exporters (e.g. node_exporter);OpenTelemetry Metric Client Libraries;OpenTelemetry Trace Client Libraries","OpenTelemetry Collector Prometheus receiver","A Prometheus-compatible (or PromQL compatible) solution from a vendor","A vendor-specific query language (specify what under Other);DataDog and Honeycomb","Configured collection or routing of metrics","3","4","Filtering and processing metrics with otelcolcontrib before sending to DataDog and Honeycomb","Stable JavaScript metrics library","histogram_quantile(0.95, rate(http_server_request_duration_seconds_bucket[5m]))","rate(robot_distance_traveled_millimeters_total[5m])","expr: timestamp(node_time) - (1e-9 * node_time) >  5;expr: timestamp(node_time_nanoseconds) - (1e-9 * node_time_nanoseconds) >  5","We should recommend adding units to metric names, for the reasons above, but let users decide if they should add them or not.","I like the dots better, and am glad OpenTelemetry chose to use them in metric names, let’s make sure dots works better in Prometheus"
"2024/05/04 1:52:35 AM AST",">1,000","Technology","Observability","Expert","Expert","Expert","Expert","Somewhat familiar","Somewhat familiar","Not at all familiar","Not at all familiar","Prometheus Client Libraries;Prometheus exporters (e.g. node_exporter)","None of the Above","An open-source prometheus backend (Thanos, Cortex, Grafana Mimir, etc.)","PromQL","Added a metric to an application;Configured collection or routing of metrics;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert;Created or edited a recording rule","3","5","The different metric types (instruments) are confusing and it is hard to tell which one to use when. ","I would like to see concepts close to what Prometheus has, rather than inventing new abstractions which have not been tested in practice.","histogram_quantile(0.95, rate(http_server_request_duration_seconds_bucket[5m]))","rate(robot_distance_traveled[5m]);rate(robot_distance_traveled_millimeters_total[5m])","expr: timestamp(node_time_nanoseconds) - (1e-9 * node_time_nanoseconds) >  5","We should recommend adding units to metric names, for the reasons above, but let users decide if they should add them or not.","I wish OpenTelemetry had chosen to use underscores to match Prometheus syntactic requirements, I believe this decision should be revisited, it’s worth the time and breaking existing OTel users."
"2024/05/04 10:17:27 AM AST","0-50","Financial","DevOps","Expert","Expert","Expert","Expert","Expert","Expert","Expert","Expert","Prometheus Client Libraries;Prometheus exporters (e.g. node_exporter);OpenTelemetry Metric Client Libraries;OpenTelemetry Trace Client Libraries;OpenTelemetry auto-instrumentation agents;Pyroscope for application profiling","OpenTelemetry Language SDK Prometheus exporters;OpenTelemetry Collector Prometheus receiver;OpenTelemetry Collector Simple Prometheus receiver;OpenTelemetry Collector Prometheus remote write exporter;Prometheus Client OTLP export.","The Prometheus Server;An open-source prometheus backend (Thanos, Cortex, Grafana Mimir, etc.)","PromQL","Added a metric to an application;Configured collection or routing of metrics;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert;Created or edited a recording rule","2","2","Last time I was faced an issue with the application tracing. I am not able to see the parameterized queries which I am using the application. But this issue is fixed.","Need more metrics related to the application performance and documented these metric related information in the OTEL docs. Please keep all metrics semantics in common format","histogram_quantile(0.95, rate(http_server_request_duration_seconds_bucket[5m]))","rate(robot_distance_traveled_millimeters_total[5m])","expr: timestamp(node_time_nanoseconds) - (1e-9 * node_time_nanoseconds) >  5","Units should generally not be added to metric names. Instead, units should be separate metadata, like the metric description. If you need to know the units for queries in alerts and dashboards, you will go look them up.","I don’t care, but don’t modify OpenTelemetry metric names."
"2024/05/04 2:46:04 PM AST",">1,000","Technology","Platform engineering","Expert","Expert","Expert","Expert","Expert","Expert","Expert","Expert","Prometheus Client Libraries;Prometheus exporters (e.g. node_exporter);OpenTelemetry Metric Client Libraries;OpenTelemetry Trace Client Libraries;OpenTelemetry auto-instrumentation agents","OpenTelemetry Language SDK Prometheus exporters;OpenTelemetry Language SDK Prometheus bridges;OpenTelemetry Collector Prometheus receiver;OpenTelemetry Collector Simple Prometheus receiver;OpenTelemetry Collector Prometheus exporter;OpenTelemetry Collector Prometheus remote write exporter;Prometheus Client OTLP export.;Prometheus Server OTLP ingestion","The Prometheus Server;An open-source prometheus backend (Thanos, Cortex, Grafana Mimir, etc.);A Prometheus-compatible (or PromQL compatible) solution from a vendor;A backend not associated with Prometheus, not compatible with PromQL","PromQL;SQL;A vendor-specific query language (specify what under Other);A different open source query language (specify what under Other);","Added a metric to an application;Configured collection or routing of metrics;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert;Created or edited a recording rule","5","5","Skills and knowledge ","Operations systems ","histogram_quantile(0.95, rate({""http.server.request.duration""}[5m]));histogram_quantile(0.95, rate({""http.server.request.duration_seconds""}[5m]));histogram_quantile(0.95, rate({""http.server.request.duration_seconds_bucket""}[5m]));histogram_quantile(0.95, rate({""http.server.request.duration_bucket""}[5m]));histogram_quantile(0.95, rate(http_server_request_duration_bucket[5m]));histogram_quantile(0.95, rate(http_server_request_duration_seconds_bucket[5m]))","rate({""robot.distance.traveled""}[5m]);rate({""robot.distance.traveled_millimeters""}[5m]);rate({""robot.distance.traveled_millimeters_total""}[5m]);rate({""robot.distance.traveled_total""}[5m]);rate(robot_distance_traveled[5m]);rate(robot_distance_traveled_millimeters_total[5m])","expr: timestamp(node_time) - (1e-9 * node_time) >  5;expr: timestamp({""node.time""}) - (1e-9 * {""node.time""}) >  5;expr: timestamp(node_time_nanoseconds) - (1e-9 * node_time_nanoseconds) >  5;expr: timestamp({""node.time_nanoseconds""}) - (1e-9 * {""node.time_nanoseconds""}) >  5","Units should generally not be added to metric names, but base units (seconds, meters, etc.) should be required.","I wish OpenTelemetry had chosen to use underscores to match Prometheus syntactic requirements, I believe this decision should be revisited, it’s worth the time and breaking existing OTel users."
"2024/05/05 7:59:09 AM AST","100-1,000","Technology","DevOps","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Not at all familiar","Prometheus exporters (e.g. node_exporter);OpenTelemetry Metric Client Libraries;OpenTelemetry auto-instrumentation agents","OpenTelemetry Collector Prometheus exporter","A Prometheus-compatible (or PromQL compatible) solution from a vendor","A vendor-specific query language (specify what under Other);Datadog","Configured collection or routing of metrics;Created or edited a dashboard for displaying metrics","2","3","The different collectors all have different configurations ","Easier query lang other than promQL","histogram_quantile(0.95, rate({""http.server.request.duration""}[5m]))","rate({""robot.distance.traveled""}[5m]);rate(robot_distance_traveled[5m])","expr: timestamp(node_time) - (1e-9 * node_time) >  5;expr: timestamp({""node.time""}) - (1e-9 * {""node.time""}) >  5","Units should generally not be added to metric names. Instead, units should be separate metadata, like the metric description. If you need to know the units for queries in alerts and dashboards, you will go look them up.","I like the dots better, and am glad OpenTelemetry chose to use them in metric names, let’s make sure dots works better in Prometheus"
"2024/05/05 12:08:44 PM AST",">1,000","Technology","Observability","Expert","Expert","Expert","Expert","Expert","Expert","Expert","Expert","Prometheus Client Libraries;Prometheus exporters (e.g. node_exporter);OpenTelemetry Metric Client Libraries;OpenTelemetry Trace Client Libraries;OpenTelemetry auto-instrumentation agents","OpenTelemetry Collector Prometheus remote write exporter","An open-source prometheus backend (Thanos, Cortex, Grafana Mimir, etc.)","PromQL","Added a metric to an application;Configured collection or routing of metrics;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert","3","5","No Prometheus Remote Write Receiver in OpenTelemetry Collector","RemoteWriteReceiver and ability to have dot in metrics (service.name and service_name both end up being service_name in Prometheus)","histogram_quantile(0.95, rate(http_server_request_duration_seconds_bucket[5m]))","rate({""robot.distance.traveled_millimeters""}[5m])","expr: timestamp(node_time) - (1e-9 * node_time) >  5;expr: timestamp(node_time_nanoseconds) - (1e-9 * node_time_nanoseconds) >  5","Units should generally not be added to metric names. Instead, units should be separate metadata, like the metric description. If you need to know the units for queries in alerts and dashboards, you will go look them up.","I like the dots better, and am glad OpenTelemetry chose to use them in metric names, let’s make sure dots works better in Prometheus"
"2024/05/06 5:03:15 PM AST","100-1,000","Technology","Platform engineering","Not at all familiar","Somewhat familiar","Somewhat familiar","Not at all familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","OpenTelemetry Trace Client Libraries;OpenTelemetry auto-instrumentation agents","None of the Above","A backend not associated with Prometheus, not compatible with PromQL","A vendor-specific query language (specify what under Other)","Added a metric to an application;Configured collection or routing of metrics;Created or edited a dashboard for displaying metrics","4","5","Na","Na","histogram_quantile(0.95, rate({""http.server.request.duration_seconds""}[5m]))","rate(robot_distance_traveled_millimeters_total[5m])","expr: timestamp(node_time) - (1e-9 * node_time) >  5","I don’t care, but just don’t break whatever the current behavior is.","I don’t care, but don’t modify OpenTelemetry metric names."
"2024/05/07 3:06:43 AM AST",">1,000","Media","Dev","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Not at all familiar","OpenTelemetry auto-instrumentation agents","OpenTelemetry Collector Prometheus receiver;OpenTelemetry Collector Prometheus remote write exporter","The Prometheus Server","PromQL","Added a metric to an application;Configured collection or routing of metrics;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert","4","4","Different label naming conventions; Mapping of OTEL attributes and resource attributes to Prometheus.","I think Prometheus should adapt to OpenTelemetry's metrics model. It should be very easy to export metrics with OTel Collector to Prometheus without additional configuration. It is important that it ""just works"".","histogram_quantile(0.95, rate({""http.server.request.duration""}[5m]))","rate(robot_distance_traveled[5m])","expr: timestamp(node_time_nanoseconds) - (1e-9 * node_time_nanoseconds) >  5","Units should generally not be added to metric names. Instead, units should be separate metadata, like the metric description. If you need to know the units for queries in alerts and dashboards, you will go look them up.","I like the dots better, and am glad OpenTelemetry chose to use them in metric names, let’s make sure dots works better in Prometheus"
"2024/05/07 9:34:06 AM AST",">1,000","Retail","Platform engineering","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Not at all familiar","Prometheus Client Libraries;Prometheus exporters (e.g. node_exporter);OpenTelemetry Metric Client Libraries;OpenTelemetry Trace Client Libraries;OTel collector, that scrapes prometheus exported metrics and send directly to OTel metrics backend to replace big parts of Prometheus","OpenTelemetry Language SDK Prometheus exporters;OpenTelemetry Collector Prometheus receiver;OpenTelemetry Collector Prometheus exporter;OpenTelemetry Collector Prometheus remote write exporter;Prometheus Client OTLP export.;Prometheus Server OTLP ingestion","The Prometheus Server;A backend not associated with Prometheus, not compatible with PromQL","PromQL;A vendor-specific query language (specify what under Other);UQL https://docs.lightstep.com/docs/uql-reference","Added a metric to an application;Configured collection or routing of metrics;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert;Created or edited a recording rule","3","5","OTel does not support aggregations that are powerful enough.
Sometimes you do not want to send tons of data to OTel provider because it's super cost intense and all you need is an aggregated value, but IMO the idea of OTel is more to get a lot of money instead of providing value to the users.","Aggregations need to be built in to not pass tons of data you do not need to feed only the bill of your provider and heat up the world by unnecessary compute.
I hope you don't want to break again user experience like it was done by Opentracing to OTel migration....","histogram_quantile(0.95, rate({""http.server.request.duration_seconds""}[5m]))","rate({""robot.distance.traveled_millimeters""}[5m])","expr: timestamp(node_time_nanoseconds) - (1e-9 * node_time_nanoseconds) >  5","Units should be required to be part of the metric name. Without them, it is hard to write proper queries, write or read alerts e.g. in YAML, and build dashboards.","I don’t care, but don’t modify OpenTelemetry metric names."
"2024/05/07 9:45:08 AM AST","100-1,000","Technology","SRE","Expert","Somewhat familiar","Somewhat familiar","Expert","Somewhat familiar","Somewhat familiar","Somewhat familiar","Not at all familiar","Prometheus Client Libraries;Prometheus exporters (e.g. node_exporter);OpenTelemetry Trace Client Libraries","Prometheus Client OTLP export.","The Prometheus Server;An open-source prometheus backend (Thanos, Cortex, Grafana Mimir, etc.)","PromQL","Added a metric to an application;Configured collection or routing of metrics;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert;Created or edited a recording rule","3","2","Vendor buy in","Unsure","histogram_quantile(0.95, rate({""http.server.request.duration_seconds_bucket""}[5m]));histogram_quantile(0.95, rate(http_server_request_duration_bucket[5m]))","rate({""robot.distance.traveled_millimeters_total""}[5m]);rate(robot_distance_traveled_millimeters_total[5m])","expr: timestamp({""node.time""}) - (1e-9 * {""node.time""}) >  5","I don’t care, but just don’t break whatever the current behavior is.","I wish OpenTelemetry had chosen to use underscores to match Prometheus syntactic requirements, I believe this decision should be revisited, it’s worth the time and breaking existing OTel users."
"2024/05/07 12:25:49 PM AST","100-1,000","Technology","Observability","Somewhat familiar","Not at all familiar","Somewhat familiar","Somewhat familiar","Not at all familiar","Not at all familiar","Not at all familiar","Not at all familiar","Prometheus Client Libraries;Prometheus exporters (e.g. node_exporter);Grafana agent, vector","None of the Above","The Prometheus Server;An open-source prometheus backend (Thanos, Cortex, Grafana Mimir, etc.)","PromQL","Configured collection or routing of metrics;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert","3","3","Haven't used otel","N/A","histogram_quantile(0.95, rate(http_server_request_duration_seconds_bucket[5m]))","rate(robot_distance_traveled_millimeters_total[5m])","expr: timestamp(node_time_nanoseconds) - (1e-9 * node_time_nanoseconds) >  5","I don’t care, but just don’t break whatever the current behavior is.","All dots should be changed to underscores when translating to Prometheus. That way, metric names match the format used by the rest of the Prometheus ecosystem."
"2024/05/07 12:37:47 PM AST",">1,000","Financial","SRE","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Expert","Somewhat familiar","Somewhat familiar","Not at all familiar","Prometheus exporters (e.g. node_exporter);OpenTelemetry Trace Client Libraries","OpenTelemetry Language SDK Prometheus exporters;OpenTelemetry Collector Prometheus exporter;OpenTelemetry Collector Prometheus remote write exporter","The Prometheus Server;An open-source prometheus backend (Thanos, Cortex, Grafana Mimir, etc.)","PromQL","Added a metric to an application;Configured collection or routing of metrics;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics","3","3","The concept of meters and scope compared to the global namespace of Prometheus","Documentation for the newcomer, not just those well versed in Otel.","histogram_quantile(0.95, rate({""http.server.request.duration""}[5m]));histogram_quantile(0.95, rate({""http.server.request.duration_seconds_bucket""}[5m]))","rate({""robot.distance.traveled""}[5m]);rate({""robot.distance.traveled_total""}[5m])","expr: timestamp({""node.time""}) - (1e-9 * {""node.time""}) >  5;expr: timestamp({""node.time_nanoseconds""}) - (1e-9 * {""node.time_nanoseconds""}) >  5","Units should generally not be added to metric names, but base units (seconds, meters, etc.) should be required.","I like the dots better, and am glad OpenTelemetry chose to use them in metric names, let’s make sure dots works better in Prometheus"
"2024/05/08 2:27:15 PM AST",">1,000","Technology","Dev","Expert","Expert","Expert","Expert","Somewhat familiar","Somewhat familiar","Somewhat familiar","Not at all familiar","Prometheus Client Libraries;Prometheus exporters (e.g. node_exporter);OpenTelemetry Trace Client Libraries","Prometheus Server OTLP ingestion","The Prometheus Server;An open-source prometheus backend (Thanos, Cortex, Grafana Mimir, etc.)","PromQL","Added a metric to an application;Configured collection or routing of metrics;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert;Created or edited a recording rule","4","4","Non-equivalence of names. How to handle OTel resource attributes in Prometheus. The confusion that OpenMetrics introduced some (partially weird) concepts that even Prometheus hasn't really embraced, and now OTel was in that weird situation what to support first class (e.g. OM says unit names MUST be in the metric name, Prometheus itself is more liberal, and now OTel is in an impossible situation what to follow).
I think the unit as part of the metric name is a good case study to understand the dissonance. Prometheus recommends both, putting the unit in the metric name _and_ using SI base units, to minimize misunderstandings. But that's partially coming from the lack of 1st class metadata support in Prometheus so that it is hard to attach unit information to a metric in a reliable fashion. Even with that metadata support, there might be arguments for including the unit name, but that was never enforced. OpenMetrics added the enforcement in the exposition format, but without getting consensus from Prometheus first. OTel, on the other hand, didn't even have a strong stance about using base units.
In my opinion, the best way out of that situation would be if all involved systems had strong metadata support, but still strongly recommended using base units, and let users make their own call if they want to have the unit in the metric name, but maybe use the unit in the metric name for commonly used metric names (e.g. in semantic conventions).","Semantic conventions that aren't using characters that are invalid (or unusual) for Prometheus.","histogram_quantile(0.95, rate({""http.server.request.duration""}[5m]));histogram_quantile(0.95, rate({""http.server.request.duration_seconds""}[5m]));histogram_quantile(0.95, rate({""http.server.request.duration_seconds_bucket""}[5m]));histogram_quantile(0.95, rate({""http.server.request.duration_bucket""}[5m]));histogram_quantile(0.95, rate(http_server_request_duration_bucket[5m]));histogram_quantile(0.95, rate(http_server_request_duration_seconds_bucket[5m]))","rate({""robot.distance.traveled""}[5m]);rate({""robot.distance.traveled_millimeters""}[5m]);rate({""robot.distance.traveled_millimeters_total""}[5m]);rate({""robot.distance.traveled_total""}[5m]);rate(robot_distance_traveled[5m]);rate(robot_distance_traveled_millimeters_total[5m])","expr: timestamp(node_time) - (1e-9 * node_time) >  5;expr: timestamp({""node.time""}) - (1e-9 * {""node.time""}) >  5;expr: timestamp(node_time_nanoseconds) - (1e-9 * node_time_nanoseconds) >  5;expr: timestamp({""node.time_nanoseconds""}) - (1e-9 * {""node.time_nanoseconds""}) >  5","We should recommend adding units to metric names, for the reasons above, but let users decide if they should add them or not.","I wish OpenTelemetry had chosen to use underscores to match Prometheus syntactic requirements, I believe this decision should be revisited, it’s worth the time and breaking existing OTel users."
"2024/05/08 6:59:03 PM AST","0-50","Research University Department (Education)","System Administration","Somewhat familiar","Expert","Expert","Expert","Not at all familiar","Not at all familiar","Not at all familiar","Not at all familiar","Prometheus Client Libraries;Prometheus exporters (e.g. node_exporter);Hand-built tools to generate Prometheus metrics","None of the Above","The Prometheus Server","PromQL","Added a metric to an application;Configured collection or routing of metrics;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert","3","3","We don't have anything that wants to use OpenTelemetry instead of native Prometheus metrics.","No opinion due to no use.","histogram_quantile(0.95, rate(http_server_request_duration_seconds_bucket[5m]))","rate(robot_distance_traveled_millimeters_total[5m])","expr: timestamp(node_time_nanoseconds) - (1e-9 * node_time_nanoseconds) >  5","Units should be required to be part of the metric name. Without them, it is hard to write proper queries, write or read alerts e.g. in YAML, and build dashboards.","All dots should be changed to underscores when translating to Prometheus. That way, metric names match the format used by the rest of the Prometheus ecosystem."
"2024/05/12 9:46:05 AM AST","50-100","Technology","SRE","Expert","Somewhat familiar","Expert","Expert","Somewhat familiar","Somewhat familiar","Expert","Somewhat familiar","Prometheus Client Libraries;Prometheus exporters (e.g. node_exporter);OpenTelemetry Metric Client Libraries;OpenTelemetry Trace Client Libraries;OpenTelemetry auto-instrumentation agents","OpenTelemetry Language SDK Prometheus exporters;OpenTelemetry Collector Prometheus remote write exporter;Prometheus Client OTLP export.;Prometheus Server OTLP ingestion","The Prometheus Server;An open-source prometheus backend (Thanos, Cortex, Grafana Mimir, etc.);A Prometheus-compatible (or PromQL compatible) solution from a vendor;A backend not associated with Prometheus, not compatible with PromQL","PromQL;A vendor-specific query language (specify what under Other)","Added a metric to an application;Configured collection or routing of metrics;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert;Created or edited a recording rule","3","2","Determining if my metrics producer (application) has stopped sending metrics","Delta temporality support :) It would make interoperability between systems much easier","histogram_quantile(0.95, rate(http_server_request_duration_bucket[5m]))","rate(robot_distance_traveled[5m])","expr: timestamp(node_time) - (1e-9 * node_time) >  5","Units should generally not be added to metric names. Instead, units should be separate metadata, like the metric description. If you need to know the units for queries in alerts and dashboards, you will go look them up.","I wish OpenTelemetry had chosen to use underscores to match Prometheus syntactic requirements, I believe this decision should be revisited, it’s worth the time and breaking existing OTel users."
"2024/05/12 6:23:01 PM AST","0-50","Technology","DevOps","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Not at all familiar","Not at all familiar","OpenTelemetry Metric Client Libraries;OpenTelemetry auto-instrumentation agents","None of the Above","The Prometheus Server","PromQL","Added a metric to an application;Configured collection or routing of metrics;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert","1","2","Instrumentation","Nothing","histogram_quantile(0.95, rate({""http.server.request.duration_seconds""}[5m]))","rate({""robot.distance.traveled""}[5m])","expr: timestamp({""node.time""}) - (1e-9 * {""node.time""}) >  5","Units should be required to be part of the metric name. Without them, it is hard to write proper queries, write or read alerts e.g. in YAML, and build dashboards.","All dots should be changed to underscores when translating to Prometheus. That way, metric names match the format used by the rest of the Prometheus ecosystem."
"2024/05/14 10:34:04 AM AST",">1,000","Technology","sales engineering","Not at all familiar","Not at all familiar","Not at all familiar","Not at all familiar","Expert","Somewhat familiar","Somewhat familiar","Somewhat familiar","OpenTelemetry auto-instrumentation agents","Prometheus Client OTLP export.","A Prometheus-compatible (or PromQL compatible) solution from a vendor","A vendor-specific query language (specify what under Other)","Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert","3","3","integration","explain otel and prometheus architecture more clearly","histogram_quantile(0.95, rate(http_server_request_duration_bucket[5m]))","rate(robot_distance_traveled[5m])","expr: timestamp(node_time) - (1e-9 * node_time) >  5","Units should generally not be added to metric names. Instead, units should be separate metadata, like the metric description. If you need to know the units for queries in alerts and dashboards, you will go look them up.","I like the dots better, and am glad OpenTelemetry chose to use them in metric names, let’s make sure dots works better in Prometheus"
"2024/05/14 12:04:05 PM AST",">1,000","Retail","DevOps","Somewhat familiar","Expert","Somewhat familiar","Expert","Not at all familiar","Not at all familiar","Not at all familiar","Not at all familiar","Prometheus Client Libraries;Prometheus exporters (e.g. node_exporter);OpenTelemetry Metric Client Libraries","None of the Above","The Prometheus Server;An open-source prometheus backend (Thanos, Cortex, Grafana Mimir, etc.);A backend not associated with Prometheus, not compatible with PromQL","PromQL;SQL","Added a metric to an application;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert","3","5","I've never tried. Also, I'm having a hard time understanding from OpenTelemetry's docs if they can work together or how.","Is it supported? Where is the documentation for that? What does supported mean? Do prometheus metrics flow into the OTel system? Or do OTel metrics flow into Prometheus? Or both?","histogram_quantile(0.95, rate({""http.server.request.duration""}[5m]));histogram_quantile(0.95, rate({""http.server.request.duration_seconds""}[5m]))","rate({""robot.distance.traveled""}[5m]);rate(robot_distance_traveled[5m])","expr: timestamp({""node.time_nanoseconds""}) - (1e-9 * {""node.time_nanoseconds""}) >  5","Units should be required to be part of the metric name. Without them, it is hard to write proper queries, write or read alerts e.g. in YAML, and build dashboards.","I like the dots better, and am glad OpenTelemetry chose to use them in metric names, let’s make sure dots works better in Prometheus"
"2024/05/14 3:01:24 PM AST","0-50","Technology","DevOps","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Not at all familiar","Prometheus Client Libraries;OpenTelemetry Metric Client Libraries;OpenTelemetry auto-instrumentation agents","OpenTelemetry Collector Prometheus exporter","The Prometheus Server","PromQL","Added a metric to an application;Configured collection or routing of metrics;Written a live (ad-hoc) query over metrics","3","4","Getting the configuration in Otel right in a way it becomes transparent to the default configurations on Prometheus side.","Converge of metrics naming conventions.","histogram_quantile(0.95, rate({""http.server.request.duration_seconds""}[5m]));histogram_quantile(0.95, rate({""http.server.request.duration_seconds_bucket""}[5m]));histogram_quantile(0.95, rate(http_server_request_duration_seconds_bucket[5m]))","rate({""robot.distance.traveled_millimeters_total""}[5m]);rate(robot_distance_traveled_millimeters_total[5m])","expr: timestamp(node_time_nanoseconds) - (1e-9 * node_time_nanoseconds) >  5","Units should generally not be added to metric names. Instead, units should be separate metadata, like the metric description. If you need to know the units for queries in alerts and dashboards, you will go look them up.","All dots should be changed to underscores when translating to Prometheus. That way, metric names match the format used by the rest of the Prometheus ecosystem."
"2024/05/14 3:07:50 PM AST",">1,000","Technology","Dev","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Not at all familiar","Prometheus Client Libraries;Prometheus exporters (e.g. node_exporter);OpenTelemetry Metric Client Libraries;OpenTelemetry Trace Client Libraries","OpenTelemetry Language SDK Prometheus exporters;OpenTelemetry Collector Prometheus receiver","An open-source prometheus backend (Thanos, Cortex, Grafana Mimir, etc.)","PromQL","Added a metric to an application;Configured collection or routing of metrics;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert;Created or edited a recording rule","3","3","""target info"" translation is poor solution. Prometheus' restrictive naming formats and lack of data types is frustrating, permanent loss of fidelity when ingesting to Prometheus-compatible backends.","solution for target info, working with / pushing Prometheus for better compatibility","histogram_quantile(0.95, rate({""http.server.request.duration""}[5m]))","rate({""robot.distance.traveled""}[5m])","expr: timestamp({""node.time""}) - (1e-9 * {""node.time""}) >  5","Units should generally not be added to metric names. Instead, units should be separate metadata, like the metric description. If you need to know the units for queries in alerts and dashboards, you will go look them up.","I like the dots better, and am glad OpenTelemetry chose to use them in metric names, let’s make sure dots works better in Prometheus"
"2024/05/14 8:57:11 PM AST",">1,000","Technology","Platform engineering","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Expert","Expert","Expert","Not at all familiar","OpenTelemetry Metric Client Libraries;OpenTelemetry Trace Client Libraries;OpenTelemetry auto-instrumentation agents","OpenTelemetry Collector Prometheus receiver;Prometheus Client OTLP export.;Prometheus Server OTLP ingestion","An open-source prometheus backend (Thanos, Cortex, Grafana Mimir, etc.)","PromQL","Added a metric to an application;Configured collection or routing of metrics;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert","3","4","the conversion isn't obvious in the beginning, lack of control on client side such as limits on cardinality.","it would be great to have a unified semantic convention on both otel and prometheus without having to do conversion. Unit name configured in otel should be included by default in prometheus as part of measurement name.","histogram_quantile(0.95, rate({""http.server.request.duration_seconds""}[5m]))","rate({""robot.distance.traveled_millimeters""}[5m])","expr: timestamp({""node.time_nanoseconds""}) - (1e-9 * {""node.time_nanoseconds""}) >  5","We should recommend adding units to metric names, for the reasons above, but let users decide if they should add them or not.","I like the dots better, and am glad OpenTelemetry chose to use them in metric names, let’s make sure dots works better in Prometheus"
"2024/05/15 4:45:55 AM AST",">1,000","Retail","Observability","Somewhat familiar","Somewhat familiar","Expert","Expert","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Prometheus exporters (e.g. node_exporter);OpenTelemetry Metric Client Libraries;OpenTelemetry Trace Client Libraries;OpenTelemetry auto-instrumentation agents;Spring + Micrometer","OpenTelemetry Collector Prometheus receiver;OpenTelemetry Collector Prometheus exporter;OpenTelemetry Collector Prometheus remote write exporter","The Prometheus Server;An open-source prometheus backend (Thanos, Cortex, Grafana Mimir, etc.)","PromQL","Configured collection or routing of metrics;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert;Created or edited a recording rule","4","4","Prometheus not being a push based solution has caused several problems.","Loadbalancing exporter for metrics.","histogram_quantile(0.95, rate(http_server_request_duration_seconds_bucket[5m]))","rate(robot_distance_traveled_millimeters_total[5m])","expr: timestamp(node_time_nanoseconds) - (1e-9 * node_time_nanoseconds) >  5","Units should be required to be part of the metric name. Without them, it is hard to write proper queries, write or read alerts e.g. in YAML, and build dashboards.","All dots should be changed to underscores when translating to Prometheus. That way, metric names match the format used by the rest of the Prometheus ecosystem."
"2024/05/15 9:51:51 AM AST",">1,000","advertisement","SRE","Expert","Expert","Expert","Expert","Somewhat familiar","Somewhat familiar","Somewhat familiar","Not at all familiar","Prometheus Client Libraries;Prometheus exporters (e.g. node_exporter);OpenTelemetry Metric Client Libraries;OpenTelemetry Trace Client Libraries","OpenTelemetry Language SDK Prometheus exporters;OpenTelemetry Collector Prometheus exporter","The Prometheus Server;An open-source prometheus backend (Thanos, Cortex, Grafana Mimir, etc.)","PromQL","Added a metric to an application;Configured collection or routing of metrics;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert;Created or edited a recording rule","4","4","Ingest native histogram. Not having metadata in prometheus","Having SDKs exporters implement protobuf to ingest native histograms directly","histogram_quantile(0.95, rate({""http.server.request.duration_seconds""}[5m]))","rate({""robot.distance.traveled_millimeters""}[5m]);rate(robot_distance_traveled_millimeters_total[5m])","expr: timestamp(node_time_nanoseconds) - (1e-9 * node_time_nanoseconds) >  5","Units should be required to be part of the metric name. Without them, it is hard to write proper queries, write or read alerts e.g. in YAML, and build dashboards.","I like the dots better, and am glad OpenTelemetry chose to use them in metric names, let’s make sure dots works better in Prometheus"
"2024/05/15 9:59:28 AM AST",">1,000","Retail","Platform engineering","Somewhat familiar","Expert","Somewhat familiar","Somewhat familiar","Expert","Expert","Expert","Expert","Prometheus Client Libraries;Prometheus exporters (e.g. node_exporter);OpenTelemetry auto-instrumentation agents;Third party with prom or otel","None of the Above","The Prometheus Server;An open-source prometheus backend (Thanos, Cortex, Grafana Mimir, etc.)","PromQL","Added a metric to an application;Created or edited an alert","4","4","Incompatible naming convention of fields, otel collector not really on HA once you scrape prom metrics etc.","All the things mentioned above","histogram_quantile(0.95, rate(http_server_request_duration_seconds_bucket[5m]))","rate(robot_distance_traveled_millimeters_total[5m])","expr: timestamp(node_time) - (1e-9 * node_time) >  5;expr: timestamp(node_time_nanoseconds) - (1e-9 * node_time_nanoseconds) >  5","Units should be required to be part of the metric name. Without them, it is hard to write proper queries, write or read alerts e.g. in YAML, and build dashboards.","I like the dots better, and am glad OpenTelemetry chose to use them in metric names, let’s make sure dots works better in Prometheus"
"2024/05/15 10:07:28 AM AST","50-100","Construction pouri g concrete","Concrete","Not at all familiar","Not at all familiar","Not at all familiar","Not at all familiar","Not at all familiar","Not at all familiar","Not at all familiar","Not at all familiar","OpenTelemetry auto-instrumentation agents","None of the Above","The Prometheus Server","SQL","Added a metric to an application","2","4","Not","Nothing","histogram_quantile(0.95, rate({""http.server.request.duration_seconds""}[5m]))","rate({""robot.distance.traveled_total""}[5m])","expr: timestamp(node_time) - (1e-9 * node_time) >  5;expr: timestamp({""node.time_nanoseconds""}) - (1e-9 * {""node.time_nanoseconds""}) >  5","I don’t care, but just don’t break whatever the current behavior is.","I like the dots better, and am glad OpenTelemetry chose to use them in metric names, let’s make sure dots works better in Prometheus"
"2024/05/15 10:59:02 AM AST",">1,000","Technology","Observability","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Expert","Expert","Expert","Somewhat familiar","OpenTelemetry Metric Client Libraries;OpenTelemetry Trace Client Libraries;OpenTelemetry auto-instrumentation agents;statsd","OpenTelemetry Collector Prometheus receiver;OpenTelemetry Collector Prometheus remote write exporter;Prometheus Client OTLP export.;Prometheus Server OTLP ingestion","An open-source prometheus backend (Thanos, Cortex, Grafana Mimir, etc.);A Prometheus-compatible (or PromQL compatible) solution from a vendor;A backend not associated with Prometheus, not compatible with PromQL","PromQL;A vendor-specific query language (specify what under Other);Datadog and NRQL","Added a metric to an application;Configured collection or routing of metrics;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert","4","3","Supporting different temporalities (Delta/Cumulative) and converting from one to the other. The cost of high cardinality metrics on cumulative. Selecting histogram buckets","Delta support / better deltatocumulative support","histogram_quantile(0.95, rate({""http.server.request.duration""}[5m]));histogram_quantile(0.95, rate({""http.server.request.duration_seconds""}[5m]))","rate({""robot.distance.traveled""}[5m]);rate({""robot.distance.traveled_millimeters""}[5m])","expr: timestamp({""node.time""}) - (1e-9 * {""node.time""}) >  5;expr: timestamp({""node.time_nanoseconds""}) - (1e-9 * {""node.time_nanoseconds""}) >  5","Units should generally not be added to metric names. Instead, units should be separate metadata, like the metric description. If you need to know the units for queries in alerts and dashboards, you will go look them up.","I like the dots better, and am glad OpenTelemetry chose to use them in metric names, let’s make sure dots works better in Prometheus"
"2024/05/15 11:33:21 AM AST",">1,000","Technology","Dev","Expert","Expert","Expert","Expert","Somewhat familiar","Expert","Expert","Not at all familiar","Prometheus Client Libraries;Prometheus exporters (e.g. node_exporter);OpenTelemetry Metric Client Libraries;OpenTelemetry Trace Client Libraries;OpenTelemetry auto-instrumentation agents","OpenTelemetry Language SDK Prometheus bridges;OpenTelemetry Collector Prometheus receiver;OpenTelemetry Collector Prometheus remote write exporter;Prometheus Server OTLP ingestion","The Prometheus Server;An open-source prometheus backend (Thanos, Cortex, Grafana Mimir, etc.)","PromQL","Added a metric to an application;Configured collection or routing of metrics;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert;Created or edited a recording rule","4","4","-","-","histogram_quantile(0.95, rate(http_server_request_duration_seconds_bucket[5m]))","rate(robot_distance_traveled[5m])","expr: timestamp({""node.time_nanoseconds""}) - (1e-9 * {""node.time_nanoseconds""}) >  5","Units should be required to be part of the metric name. Without them, it is hard to write proper queries, write or read alerts e.g. in YAML, and build dashboards.","I wish OpenTelemetry had chosen to use underscores to match Prometheus syntactic requirements, but we should leave the dots in-place."
"2024/05/15 1:39:06 PM AST",">1,000","Technology","Observability","Expert","Expert","Expert","Expert","Somewhat familiar","Somewhat familiar","Not at all familiar","Not at all familiar","Prometheus Client Libraries;Prometheus exporters (e.g. node_exporter);OpenTelemetry Trace Client Libraries","None of the Above","An open-source prometheus backend (Thanos, Cortex, Grafana Mimir, etc.)","PromQL","Added a metric to an application;Configured collection or routing of metrics;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert;Created or edited a recording rule","5","5","Naming conventions between 2 cncf project is messy how come","Not sure I need otel for metrics ","histogram_quantile(0.95, rate({""http.server.request.duration_seconds_bucket""}[5m]))","rate({""robot.distance.traveled_millimeters_total""}[5m])","expr: timestamp(node_time_nanoseconds) - (1e-9 * node_time_nanoseconds) >  5","We should recommend adding units to metric names, for the reasons above, but let users decide if they should add them or not.","I wish OpenTelemetry had chosen to use underscores to match Prometheus syntactic requirements, I believe this decision should be revisited, it’s worth the time and breaking existing OTel users."
"2024/05/15 4:02:23 PM AST",">1,000","Technology","Observability","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Expert","Expert","Expert","Not at all familiar","Prometheus Client Libraries;Prometheus exporters (e.g. node_exporter);OpenTelemetry Metric Client Libraries;OpenTelemetry Trace Client Libraries;OpenTelemetry auto-instrumentation agents","OpenTelemetry Collector Prometheus receiver;OpenTelemetry Collector Prometheus remote write exporter","An open-source prometheus backend (Thanos, Cortex, Grafana Mimir, etc.)","PromQL","Configured collection or routing of metrics;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert;Created or edited a recording rule","3","4","Metrics Translation from OTel to Prometheus and naming","Support for dot in the metrics names in Prometheus","histogram_quantile(0.95, rate(http_server_request_duration_bucket[5m]))","rate(robot_distance_traveled[5m])","expr: timestamp(node_time) - (1e-9 * node_time) >  5","Units should generally not be added to metric names. Instead, units should be separate metadata, like the metric description. If you need to know the units for queries in alerts and dashboards, you will go look them up.","I like the dots better, and am glad OpenTelemetry chose to use them in metric names, let’s make sure dots works better in Prometheus"
"2024/05/15 9:03:59 PM AST","100-1,000","Technology","DevOps","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Expert","Expert","Prometheus exporters (e.g. node_exporter);OpenTelemetry Metric Client Libraries;OpenTelemetry Trace Client Libraries;OpenTelemetry auto-instrumentation agents","OpenTelemetry Collector Prometheus receiver;OpenTelemetry Collector Prometheus remote write exporter","The Prometheus Server;An open-source prometheus backend (Thanos, Cortex, Grafana Mimir, etc.)","PromQL","Added a metric to an application;Configured collection or routing of metrics;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert;Created or edited a recording rule","4","4","The convention different between Prometheus and OTLP, which translates over into Loki. Namely, the dropping of resource attributes that aren’t service.name and service.namespace (typing from memory). I’m so glad that the opentelemetry collector converts attributes to labels to solve this, however, if emitting over OTLP. Using the target_info metric to do joins because Prometheus drops attributes when using OTLP is bonkers. Honestly, it should just support OTEL SemConv.","Prometheus moving to the OTEL standards. ","histogram_quantile(0.95, rate({""http.server.request.duration""}[5m]));histogram_quantile(0.95, rate({""http.server.request.duration_seconds_bucket""}[5m]))","rate({""robot.distance.traveled""}[5m]);rate({""robot.distance.traveled_millimeters""}[5m])","expr: timestamp({""node.time""}) - (1e-9 * {""node.time""}) >  5;expr: timestamp({""node.time_nanoseconds""}) - (1e-9 * {""node.time_nanoseconds""}) >  5","Units should generally not be added to metric names. Instead, units should be separate metadata, like the metric description. If you need to know the units for queries in alerts and dashboards, you will go look them up.","I like the dots better, and am glad OpenTelemetry chose to use them in metric names, let’s make sure dots works better in Prometheus"
"2024/05/16 1:40:22 AM AST",">1,000","Technology","SRE","Somewhat familiar","Expert","Expert","Expert","Not at all familiar","Not at all familiar","Somewhat familiar","Not at all familiar","Prometheus Client Libraries;Prometheus exporters (e.g. node_exporter)","None of the Above","The Prometheus Server;A Prometheus-compatible (or PromQL compatible) solution from a vendor","PromQL","Added a metric to an application;Configured collection or routing of metrics;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert;Created or edited a recording rule","3","3","I'm satisfied with Prometheus, so I don't have any reason to use OpenTelemetry.","A tool that can be set up easily.","histogram_quantile(0.95, rate(http_server_request_duration_seconds_bucket[5m]))","rate(robot_distance_traveled_millimeters_total[5m])","expr: timestamp(node_time) - (1e-9 * node_time) >  5","We should recommend adding units to metric names, for the reasons above, but let users decide if they should add them or not.","All dots should be changed to underscores when translating to Prometheus. That way, metric names match the format used by the rest of the Prometheus ecosystem."
"2024/05/16 1:42:55 AM AST",">1,000","Technology","Observability","Somewhat familiar","Expert","Expert","Somewhat familiar","Not at all familiar","Somewhat familiar","Somewhat familiar","Not at all familiar","Prometheus Client Libraries;Prometheus exporters (e.g. node_exporter)","None of the Above","The Prometheus Server;A Prometheus-compatible (or PromQL compatible) solution from a vendor","PromQL","Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert;Created or edited a recording rule","4","4","OTel standards requires more complexity than just using exporters with OpenMetrics format.","I'm not sure, though I hope Prometheus could support OpenTelemetry without losing established Prometheus standards(like metrics format).","histogram_quantile(0.95, rate(http_server_request_duration_seconds_bucket[5m]))","rate(robot_distance_traveled_millimeters_total[5m])","expr: timestamp(node_time_nanoseconds) - (1e-9 * node_time_nanoseconds) >  5","We should recommend adding units to metric names, for the reasons above, but let users decide if they should add them or not.","All dots should be changed to underscores when translating to Prometheus. That way, metric names match the format used by the rest of the Prometheus ecosystem."
"2024/05/16 4:26:27 AM AST","0-50","Technology","Platform engineering","Somewhat familiar","Somewhat familiar","Somewhat familiar","Not at all familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Prometheus exporters (e.g. node_exporter);OpenTelemetry auto-instrumentation agents","OpenTelemetry Collector Prometheus receiver;OpenTelemetry Collector Prometheus exporter","An open-source prometheus backend (Thanos, Cortex, Grafana Mimir, etc.)","PromQL","Created or edited a dashboard for displaying metrics","3","4","Undestanding of architectural concepts and different components involved.","Simplified guide for a Prometheus -> to OTEL Collector -> to ANYTHING implementation","histogram_quantile(0.95, rate({""http.server.request.duration""}[5m]));histogram_quantile(0.95, rate({""http.server.request.duration_seconds""}[5m]));histogram_quantile(0.95, rate({""http.server.request.duration_seconds_bucket""}[5m]))","rate({""robot.distance.traveled""}[5m]);rate({""robot.distance.traveled_millimeters""}[5m]);rate({""robot.distance.traveled_millimeters_total""}[5m])","expr: timestamp({""node.time""}) - (1e-9 * {""node.time""}) >  5;expr: timestamp({""node.time_nanoseconds""}) - (1e-9 * {""node.time_nanoseconds""}) >  5","We should recommend adding units to metric names, for the reasons above, but let users decide if they should add them or not.","I like the dots better, and am glad OpenTelemetry chose to use them in metric names, let’s make sure dots works better in Prometheus"
"2024/05/16 7:24:04 AM AST","0-50","Technology","Dev","Somewhat familiar","Somewhat familiar","Somewhat familiar","Expert","Expert","Expert","Expert","Not at all familiar","Prometheus exporters (e.g. node_exporter);OpenTelemetry Metric Client Libraries;OpenTelemetry auto-instrumentation agents","OpenTelemetry Collector Prometheus remote write exporter","The Prometheus Server;A Prometheus-compatible (or PromQL compatible) solution from a vendor;A backend not associated with Prometheus, not compatible with PromQL","PromQL;A vendor-specific query language (specify what under Other);NRQL, Datadog, LightStep, SignalFx","Added a metric to an application;Configured collection or routing of metrics;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert;Created or edited a recording rule","1","2","Conventions don't align very well. Otel's recent tendency to put namespaces everywhere, especially in attributes, makes it very clumsy in PromQL. But overall, the definition of metrics in Otel is much better than in Prometheus, because you don't have to put the type and unit of the metric in its name.","The translation of metrics from Otel to Prometheus works surprisingly well. It would be great if the prometheusreceiver could perform the same reverse translation.","histogram_quantile(0.95, rate({""http.server.request.duration""}[5m]));histogram_quantile(0.95, rate(http_server_request_duration_seconds_bucket[5m]))","rate({""robot.distance.traveled""}[5m]);rate(robot_distance_traveled_millimeters_total[5m])","expr: timestamp(node_time_nanoseconds) - (1e-9 * node_time_nanoseconds) >  5","Units should generally not be added to metric names, but base units (seconds, meters, etc.) should be required.","I like the dots better, and am glad OpenTelemetry chose to use them in metric names, let’s make sure dots works better in Prometheus"
"2024/05/16 9:47:39 AM AST",">1,000","Technology","Observability","Somewhat familiar","Expert","Expert","Somewhat familiar","Somewhat familiar","Somewhat familiar","Expert","Not at all familiar","Prometheus Client Libraries;Prometheus exporters (e.g. node_exporter);OpenTelemetry auto-instrumentation agents","OpenTelemetry Language SDK Prometheus exporters;OpenTelemetry Collector Prometheus receiver;Prometheus Server OTLP ingestion","The Prometheus Server;An open-source prometheus backend (Thanos, Cortex, Grafana Mimir, etc.)","PromQL","Configured collection or routing of metrics;Created or edited a dashboard for displaying metrics;Created or edited a recording rule","4","4","Dots, slashes and such in metric names","I would prefer to see more alignment with what exists in CNCF. Do not reinvent the wheel.","histogram_quantile(0.95, rate({""http.server.request.duration_seconds""}[5m]));histogram_quantile(0.95, rate(http_server_request_duration_bucket[5m]))","rate(robot_distance_traveled_millimeters_total[5m])","expr: timestamp(node_time_nanoseconds) - (1e-9 * node_time_nanoseconds) >  5","Units should be required to be part of the metric name. Without them, it is hard to write proper queries, write or read alerts e.g. in YAML, and build dashboards.","I wish OpenTelemetry had chosen to use underscores to match Prometheus syntactic requirements, I believe this decision should be revisited, it’s worth the time and breaking existing OTel users."
"2024/05/16 9:59:54 AM AST",">1,000","Technology","Observability","Expert","Expert","Expert","Expert","Somewhat familiar","Expert","Somewhat familiar","Not at all familiar","Prometheus Client Libraries;Prometheus exporters (e.g. node_exporter)","None of the Above","The Prometheus Server;An open-source prometheus backend (Thanos, Cortex, Grafana Mimir, etc.);A Prometheus-compatible (or PromQL compatible) solution from a vendor","PromQL","Added a metric to an application;Configured collection or routing of metrics;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert","4","4","That OpenTelemetry chosen dots as separators, how over informative labels are and decisions, breaks with Prometheus model without good reasons or explanation (e.g. initial le vs ge for histograms), too complex OTLP format, tracing driven metric data model.","OpenTelemetry reverted, revisited some decisions, and/or started experimenting and iterating more vs creating arbitrary decisions breaking everyone and/or explained their intention and goals clearly for each breaking change. 

Some decisions e.g. Unit felt like without real motivation (or at least nothing noted).","histogram_quantile(0.95, rate({""http.server.request.duration_seconds""}[5m]));histogram_quantile(0.95, rate({""http.server.request.duration_seconds_bucket""}[5m]));histogram_quantile(0.95, rate(http_server_request_duration_seconds_bucket[5m]))","rate({""robot.distance.traveled_millimeters_total""}[5m]);rate(robot_distance_traveled_millimeters_total[5m])","expr: timestamp(node_time_nanoseconds) - (1e-9 * node_time_nanoseconds) >  5;expr: timestamp({""node.time_nanoseconds""}) - (1e-9 * {""node.time_nanoseconds""}) >  5","Units should be required to be part of the metric name. Without them, it is hard to write proper queries, write or read alerts e.g. in YAML, and build dashboards.","I wish OpenTelemetry had chosen to use underscores to match Prometheus syntactic requirements, but we should leave the dots in-place."
"2024/05/16 12:54:32 PM AST","0-50","Technology","Observability","Expert","Expert","Expert","Expert","Not at all familiar","Somewhat familiar","Somewhat familiar","Not at all familiar","Prometheus Client Libraries;Prometheus exporters (e.g. node_exporter);OpenTelemetry Trace Client Libraries","None of the Above","The Prometheus Server;An open-source prometheus backend (Thanos, Cortex, Grafana Mimir, etc.)","PromQL","Added a metric to an application;Configured collection or routing of metrics;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert;Created or edited a recording rule","4","3","OTel created a whole new spec when Prometheus already dominated that space. Now everybody is requiring Otel and it just feels like unnecessary duplicated work. We're not solving new problems, we're just recreating old ones.","I'd like to see OTel's metric spec to disappear and Prometheus to remain the standard.","histogram_quantile(0.95, rate({""http.server.request.duration""}[5m]))","rate(robot_distance_traveled[5m])","expr: timestamp(node_time) - (1e-9 * node_time) >  5","Units should generally not be added to metric names. Instead, units should be separate metadata, like the metric description. If you need to know the units for queries in alerts and dashboards, you will go look them up.","I wish OpenTelemetry had chosen to use underscores to match Prometheus syntactic requirements, I believe this decision should be revisited, it’s worth the time and breaking existing OTel users."
"2024/05/16 12:57:12 PM AST",">1,000","Research","Operations","Not at all familiar","Somewhat familiar","Expert","Expert","Not at all familiar","Not at all familiar","Not at all familiar","Not at all familiar","Prometheus exporters (e.g. node_exporter)","None of the Above","The Prometheus Server","PromQL","Configured collection or routing of metrics;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert;Created or edited a recording rule","3","3","None","Nothing","histogram_quantile(0.95, rate({""http.server.request.duration_seconds""}[5m]));histogram_quantile(0.95, rate(http_server_request_duration_seconds_bucket[5m]))","rate(robot_distance_traveled_millimeters_total[5m])","expr: timestamp(node_time_nanoseconds) - (1e-9 * node_time_nanoseconds) >  5","Units should be required to be part of the metric name. Without them, it is hard to write proper queries, write or read alerts e.g. in YAML, and build dashboards.","All dots should be changed to underscores when translating to Prometheus. That way, metric names match the format used by the rest of the Prometheus ecosystem."
"2024/05/16 4:07:38 PM AST","0-50","Technology","Platform engineering","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Not at all familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Prometheus exporters (e.g. node_exporter);OpenTelemetry Metric Client Libraries;OpenTelemetry auto-instrumentation agents","OpenTelemetry Collector Simple Prometheus receiver;OpenTelemetry Collector Prometheus remote write exporter;Prometheus Client OTLP export.","An open-source prometheus backend (Thanos, Cortex, Grafana Mimir, etc.)","PromQL","Added a metric to an application;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert","2","3","None","N/A","histogram_quantile(0.95, rate({""http.server.request.duration_bucket""}[5m]))","rate({""robot.distance.traveled_millimeters""}[5m])","expr: timestamp(node_time) - (1e-9 * node_time) >  5;expr: timestamp({""node.time""}) - (1e-9 * {""node.time""}) >  5","I don’t care, but just don’t break whatever the current behavior is.","I like the dots better, and am glad OpenTelemetry chose to use them in metric names, let’s make sure dots works better in Prometheus"
"2024/05/17 4:07:01 AM AST","100-1,000","Technology","SRE","Expert","Expert","Expert","Expert","Expert","Expert","Expert","Not at all familiar","Prometheus Client Libraries;Prometheus exporters (e.g. node_exporter);OpenTelemetry Metric Client Libraries;OpenTelemetry Trace Client Libraries;OpenTelemetry auto-instrumentation agents","OpenTelemetry Language SDK Prometheus exporters;OpenTelemetry Collector Prometheus receiver;OpenTelemetry Collector Prometheus exporter;OpenTelemetry Collector Prometheus remote write exporter","The Prometheus Server","PromQL","Added a metric to an application;Configured collection or routing of metrics;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert;Created or edited a recording rule","2","4","In recent otel-javaagent changes metric names changed and units in metric names are not consostent.","Consisten units in metric names…","histogram_quantile(0.95, rate(http_server_request_duration_bucket[5m]))","rate(robot_distance_traveled[5m])","expr: timestamp(node_time) - (1e-9 * node_time) >  5","Units should generally not be added to metric names. Instead, units should be separate metadata, like the metric description. If you need to know the units for queries in alerts and dashboards, you will go look them up.","All dots should be changed to underscores when translating to Prometheus. That way, metric names match the format used by the rest of the Prometheus ecosystem."
"2024/05/17 6:47:08 AM AST","0-50","Technology","Operations","Not at all familiar","Somewhat familiar","Not at all familiar","Not at all familiar","Not at all familiar","Not at all familiar","Somewhat familiar","Not at all familiar","Prometheus Client Libraries;OpenTelemetry auto-instrumentation agents;","OpenTelemetry Language SDK Prometheus exporters;OpenTelemetry Collector Prometheus receiver;OpenTelemetry Collector Simple Prometheus receiver;OpenTelemetry Collector Prometheus exporter;OpenTelemetry Collector Prometheus remote write exporter;Prometheus Client OTLP export.;Prometheus Server OTLP ingestion","The Prometheus Server;An open-source prometheus backend (Thanos, Cortex, Grafana Mimir, etc.);A Prometheus-compatible (or PromQL compatible) solution from a vendor;A backend not associated with Prometheus, not compatible with PromQL","A different open source query language (specify what under Other)","Added a metric to an application;Configured collection or routing of metrics;Created or edited a dashboard for displaying metrics;Created or edited a recording rule","2","2","ليس الكثير","استخدام المواقع بصورتي","histogram_quantile(0.95, rate({""http.server.request.duration""}[5m]))","rate({""robot.distance.traveled""}[5m]);rate({""robot.distance.traveled_millimeters""}[5m]);rate({""robot.distance.traveled_millimeters_total""}[5m]);rate({""robot.distance.traveled_total""}[5m]);rate(robot_distance_traveled[5m]);rate(robot_distance_traveled_millimeters_total[5m])","expr: timestamp({""node.time""}) - (1e-9 * {""node.time""}) >  5","I don’t care, but just don’t break whatever the current behavior is.","I don’t care, but don’t break whatever the current behavior is."
"2024/05/18 2:50:14 AM AST",">1,000","Telco","Platform engineering","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Expert","Expert","Prometheus exporters (e.g. node_exporter)","OpenTelemetry Collector Prometheus receiver;OpenTelemetry Collector Prometheus remote write exporter","An open-source prometheus backend (Thanos, Cortex, Grafana Mimir, etc.)","PromQL","Configured collection or routing of metrics;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert","2","2","Educating people (tech and business) that we don't have a Prometheus instance anymore","See operator's #1669 closed soon, separate target allocator CRD to have it VPA-scaled","histogram_quantile(0.95, rate(http_server_request_duration_bucket[5m]))","rate(robot_distance_traveled[5m])","expr: timestamp(node_time_nanoseconds) - (1e-9 * node_time_nanoseconds) >  5","We should recommend adding units to metric names, for the reasons above, but let users decide if they should add them or not.","I don’t care, but don’t break whatever the current behavior is."
"2024/05/19 5:18:13 AM AST","100-1,000","Technology","DevOps","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Prometheus exporters (e.g. node_exporter);OpenTelemetry auto-instrumentation agents","OpenTelemetry Language SDK Prometheus exporters","An open-source prometheus backend (Thanos, Cortex, Grafana Mimir, etc.)","PromQL","Added a metric to an application;Created or edited a dashboard for displaying metrics","3","3","Even if you use a  agent, still need to manually associate the trace id.","Fully automated to collect observable data","histogram_quantile(0.95, rate({""http.server.request.duration_seconds_bucket""}[5m]))","rate({""robot.distance.traveled_millimeters_total""}[5m])","expr: timestamp(node_time_nanoseconds) - (1e-9 * node_time_nanoseconds) >  5;expr: timestamp({""node.time_nanoseconds""}) - (1e-9 * {""node.time_nanoseconds""}) >  5","Units should be required to be part of the metric name. Without them, it is hard to write proper queries, write or read alerts e.g. in YAML, and build dashboards.","I wish OpenTelemetry had chosen to use underscores to match Prometheus syntactic requirements, I believe this decision should be revisited, it’s worth the time and breaking existing OTel users."
"2024/05/19 7:25:22 PM AST","100-1,000","Technology","DevOps","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Prometheus Client Libraries;Prometheus exporters (e.g. node_exporter);OpenTelemetry Metric Client Libraries;OpenTelemetry auto-instrumentation agents","OpenTelemetry Language SDK Prometheus exporters","The Prometheus Server;An open-source prometheus backend (Thanos, Cortex, Grafana Mimir, etc.)","PromQL","Added a metric to an application;Configured collection or routing of metrics;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert;Created or edited a recording rule","3","2","Unstable status of the specs.","Some HTTP / RPC metrics use seconds and some use milliseconds as the unit of choice (as per sem conv).","histogram_quantile(0.95, rate(http_server_request_duration_seconds_bucket[5m]))","rate(robot_distance_traveled_millimeters_total[5m])","expr: timestamp(node_time_nanoseconds) - (1e-9 * node_time_nanoseconds) >  5","Units should be required to be part of the metric name. Without them, it is hard to write proper queries, write or read alerts e.g. in YAML, and build dashboards.","All dots should be changed to underscores when translating to Prometheus. That way, metric names match the format used by the rest of the Prometheus ecosystem."
"2024/05/20 5:00:14 PM AST","0-50","Technology","Dev","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Expert","Expert","Somewhat familiar","Not at all familiar","OpenTelemetry Metric Client Libraries;OpenTelemetry Trace Client Libraries;OpenTelemetry Logging Client Libraries","None of the Above","An open-source prometheus backend (Thanos, Cortex, Grafana Mimir, etc.)","PromQL","Added a metric to an application;Configured collection or routing of metrics;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics","2","2","N/A","N/A","histogram_quantile(0.95, rate({""http.server.request.duration""}[5m]));histogram_quantile(0.95, rate({""http.server.request.duration_seconds""}[5m]))","rate({""robot.distance.traveled""}[5m])","expr: timestamp({""node.time""}) - (1e-9 * {""node.time""}) >  5","Units should generally not be added to metric names. Instead, units should be separate metadata, like the metric description. If you need to know the units for queries in alerts and dashboards, you will go look them up.","I like the dots better, and am glad OpenTelemetry chose to use them in metric names, let’s make sure dots works better in Prometheus"
"2024/05/21 9:57:41 AM AST",">1,000","Financial","Architecture Cloud","Not at all familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Prometheus exporters (e.g. node_exporter);OpenTelemetry auto-instrumentation agents","OpenTelemetry Collector Prometheus remote write exporter","An open-source prometheus backend (Thanos, Cortex, Grafana Mimir, etc.)","PromQL","Configured collection or routing of metrics;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert;Created or edited a recording rule","2","3","The collector prometheus receiver is very limited (support for crds, scalability, HA)","Better receiver for scrapping prometheus, an easy way to transform specific resource attributes to labels without having to use ottl function (right now it is all or nothing with resource_to_telemetry_conversion property)","histogram_quantile(0.95, rate({""http.server.request.duration_seconds""}[5m]))","rate({""robot.distance.traveled_millimeters""}[5m]);rate({""robot.distance.traveled_millimeters_total""}[5m])","expr: timestamp(node_time_nanoseconds) - (1e-9 * node_time_nanoseconds) >  5","Units should be required to be part of the metric name. Without them, it is hard to write proper queries, write or read alerts e.g. in YAML, and build dashboards.","I wish OpenTelemetry had chosen to use underscores to match Prometheus syntactic requirements, but we should leave the dots in-place."
"2024/05/21 7:04:52 PM AST","100-1,000","Security","Platform engineering","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Prometheus Client Libraries;Prometheus exporters (e.g. node_exporter);OpenTelemetry Metric Client Libraries","OpenTelemetry Language SDK Prometheus exporters;Prometheus Server OTLP ingestion","The Prometheus Server;An open-source prometheus backend (Thanos, Cortex, Grafana Mimir, etc.);A Prometheus-compatible (or PromQL compatible) solution from a vendor","PromQL","Added a metric to an application;Configured collection or routing of metrics;Written a live (ad-hoc) query over metrics","2","3","OpenTelemetry has concepts that don't exist in Prometheus such as resources. It was surprising to add an attribute to a resource but not have it propogate to the metric when exporting as prometheus","The ability to change attributes of metrics so that I can make them match the same conventions we use with Prometheus today.","histogram_quantile(0.95, rate({""http.server.request.duration""}[5m]));histogram_quantile(0.95, rate({""http.server.request.duration_seconds""}[5m]))","rate({""robot.distance.traveled""}[5m]);rate({""robot.distance.traveled_millimeters_total""}[5m])","expr: timestamp({""node.time_nanoseconds""}) - (1e-9 * {""node.time_nanoseconds""}) >  5","We should recommend adding units to metric names, for the reasons above, but let users decide if they should add them or not.","I don’t care, but don’t break whatever the current behavior is."
"2024/05/22 11:20:27 AM AST",">1,000","Technology","Observability","Somewhat familiar","Somewhat familiar","Expert","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Prometheus Client Libraries;Prometheus exporters (e.g. node_exporter);OpenTelemetry Metric Client Libraries;OpenTelemetry Trace Client Libraries","OpenTelemetry Collector Prometheus receiver;OpenTelemetry Collector Simple Prometheus receiver;OpenTelemetry Collector Prometheus exporter;OpenTelemetry Collector Prometheus remote write exporter;Prometheus Client OTLP export.;Prometheus Server OTLP ingestion","The Prometheus Server;An open-source prometheus backend (Thanos, Cortex, Grafana Mimir, etc.)","PromQL","Added a metric to an application;Configured collection or routing of metrics;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert;Created or edited a recording rule","1","1","Pushing otel vs pulling prom","N/A","histogram_quantile(0.95, rate(http_server_request_duration_bucket[5m]))","rate(robot_distance_traveled_millimeters_total[5m])","expr: timestamp(node_time_nanoseconds) - (1e-9 * node_time_nanoseconds) >  5","We should recommend adding units to metric names, for the reasons above, but let users decide if they should add them or not.","I wish OpenTelemetry had chosen to use underscores to match Prometheus syntactic requirements, I believe this decision should be revisited, it’s worth the time and breaking existing OTel users."
"2024/05/22 7:11:16 PM AST",">1,000","Technology","Platform engineering","Not at all familiar","Somewhat familiar","Not at all familiar","Somewhat familiar","Expert","Expert","Expert","Somewhat familiar","OpenTelemetry Metric Client Libraries;OpenTelemetry Trace Client Libraries;OpenTelemetry auto-instrumentation agents","OpenTelemetry Collector Prometheus receiver;OpenTelemetry Collector Simple Prometheus receiver","A Prometheus-compatible (or PromQL compatible) solution from a vendor","PromQL","Added a metric to an application;Configured collection or routing of metrics;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert","4","3","Lack of ability to easily query on Otel Resource attributes in PromQL (doing a left join on target_info{} is *not* an answer).  Change in naming convention (e.g. always changing the ""."" to an ""_"".  The inconsistency (in general - e.g. added suffixes for units/total) between names in Otel Semantic Conventions and Prometheus metrics.  ""job"" vs ""service.namespace/service.name"".  The need for ""service.instance.id"" to satisfy Prometheus' ""instance"" requirement.","Allow ""."" in Prometheus metric names.  More examples of how to write recording rules in Prometheus receiver in Otel Collector documentation for people who are *not* Prometheus experts, but are OpenTelemetry experts.","histogram_quantile(0.95, rate({""http.server.request.duration""}[5m]));histogram_quantile(0.95, rate({""http.server.request.duration_seconds""}[5m]))","rate({""robot.distance.traveled""}[5m]);rate({""robot.distance.traveled_millimeters""}[5m])","expr: timestamp(node_time) - (1e-9 * node_time) >  5;expr: timestamp({""node.time""}) - (1e-9 * {""node.time""}) >  5","Units should generally not be added to metric names. Instead, units should be separate metadata, like the metric description. If you need to know the units for queries in alerts and dashboards, you will go look them up.","I like the dots better, and am glad OpenTelemetry chose to use them in metric names, let’s make sure dots works better in Prometheus"
"2024/05/23 2:50:04 PM AST",">1,000","Technology","DevOps","Somewhat familiar","Somewhat familiar","Expert","Expert","Expert","Expert","Expert","Expert","OpenTelemetry Metric Client Libraries;OpenTelemetry Trace Client Libraries;OpenTelemetry auto-instrumentation agents","OpenTelemetry Language SDK Prometheus exporters;OpenTelemetry Language SDK Prometheus bridges;OpenTelemetry Collector Prometheus receiver;OpenTelemetry Collector Simple Prometheus receiver;OpenTelemetry Collector Prometheus exporter;OpenTelemetry Collector Prometheus remote write exporter;Prometheus Client OTLP export.;Prometheus Server OTLP ingestion","The Prometheus Server;A Prometheus-compatible (or PromQL compatible) solution from a vendor","PromQL","Added a metric to an application;Configured collection or routing of metrics","5","5","Querying the metric data with promql  for alerting in alert manager. ","Opetemtelemetry metric s should be match the Prometheus metric s. ","histogram_quantile(0.95, rate({""http.server.request.duration""}[5m]));histogram_quantile(0.95, rate({""http.server.request.duration_seconds""}[5m]))","rate({""robot.distance.traveled""}[5m]);rate({""robot.distance.traveled_millimeters""}[5m]);rate({""robot.distance.traveled_millimeters_total""}[5m])","expr: timestamp(node_time) - (1e-9 * node_time) >  5;expr: timestamp({""node.time""}) - (1e-9 * {""node.time""}) >  5;expr: timestamp(node_time_nanoseconds) - (1e-9 * node_time_nanoseconds) >  5;expr: timestamp({""node.time_nanoseconds""}) - (1e-9 * {""node.time_nanoseconds""}) >  5","Units should be required to be part of the metric name. Without them, it is hard to write proper queries, write or read alerts e.g. in YAML, and build dashboards.","I wish OpenTelemetry had chosen to use underscores to match Prometheus syntactic requirements, but we should leave the dots in-place."
"2024/05/23 10:05:32 PM AST","100-1,000","Technology","SRE","Somewhat familiar","Somewhat familiar","Expert","Expert","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Prometheus exporters (e.g. node_exporter);OpenTelemetry Trace Client Libraries;OpenTelemetry auto-instrumentation agents","OpenTelemetry Language SDK Prometheus exporters;OpenTelemetry Collector Prometheus receiver;OpenTelemetry Collector Simple Prometheus receiver;OpenTelemetry Collector Prometheus remote write exporter;Prometheus Client OTLP export.;Prometheus Server OTLP ingestion","The Prometheus Server;An open-source prometheus backend (Thanos, Cortex, Grafana Mimir, etc.);A Prometheus-compatible (or PromQL compatible) solution from a vendor;A backend not associated with Prometheus, not compatible with PromQL","PromQL;SQL;A different open source query language (specify what under Other)","Added a metric to an application;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert;Created or edited a recording rule","4","4","Not able to validate the latency values and struggling with alerting with MS Team","More features to handle alerting and latency valuesnof endpoints ","histogram_quantile(0.95, rate({""http.server.request.duration""}[5m]));histogram_quantile(0.95, rate({""http.server.request.duration_seconds""}[5m]));histogram_quantile(0.95, rate({""http.server.request.duration_seconds_bucket""}[5m]));histogram_quantile(0.95, rate({""http.server.request.duration_bucket""}[5m]));histogram_quantile(0.95, rate(http_server_request_duration_bucket[5m]));histogram_quantile(0.95, rate(http_server_request_duration_seconds_bucket[5m]))","rate({""robot.distance.traveled_millimeters""}[5m]);rate({""robot.distance.traveled_millimeters_total""}[5m]);rate(robot_distance_traveled[5m])","expr: timestamp(node_time) - (1e-9 * node_time) >  5;expr: timestamp({""node.time""}) - (1e-9 * {""node.time""}) >  5;expr: timestamp(node_time_nanoseconds) - (1e-9 * node_time_nanoseconds) >  5","Units should be required to be part of the metric name. Without them, it is hard to write proper queries, write or read alerts e.g. in YAML, and build dashboards.","All dots should be changed to underscores when translating to Prometheus. That way, metric names match the format used by the rest of the Prometheus ecosystem."
"2024/05/24 8:12:30 AM AST",">1,000","Retail","Platform engineering","Somewhat familiar","Somewhat familiar","Not at all familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Not at all familiar","Prometheus Client Libraries;OpenTelemetry Metric Client Libraries;OpenTelemetry Trace Client Libraries;OpenTelemetry auto-instrumentation agents","OpenTelemetry Collector Prometheus receiver;OpenTelemetry Collector Prometheus remote write exporter;Prometheus Client OTLP export.","The Prometheus Server","PromQL","Added a metric to an application;Created or edited a dashboard for displaying metrics;Created or edited an alert","3","2","Prometheus Remote Write Setup","Easier Ingestion into Prometheus","histogram_quantile(0.95, rate(http_server_request_duration_bucket[5m]))","rate(robot_distance_traveled[5m])","expr: timestamp(node_time) - (1e-9 * node_time) >  5","Units should generally not be added to metric names. Instead, units should be separate metadata, like the metric description. If you need to know the units for queries in alerts and dashboards, you will go look them up.","I like the dots better, and am glad OpenTelemetry chose to use them in metric names, let’s make sure dots works better in Prometheus"
"2024/05/24 8:30:17 AM AST",">1,000","Technology","SRE","Somewhat familiar","Somewhat familiar","Expert","Expert","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Prometheus exporters (e.g. node_exporter);OpenTelemetry Metric Client Libraries;OpenTelemetry Trace Client Libraries;OpenTelemetry auto-instrumentation agents","OpenTelemetry Collector Prometheus receiver;OpenTelemetry Collector Simple Prometheus receiver;OpenTelemetry Collector Prometheus exporter;OpenTelemetry Collector Prometheus remote write exporter","The Prometheus Server;A Prometheus-compatible (or PromQL compatible) solution from a vendor","PromQL","Configured collection or routing of metrics","4","5","Not able to create alerts using PromQL queries on top of the OpenTelemetry-generated metrics.Ensure that the metric names and labels used in PromQL queries match exactly with those generated by OpenTelemetry.",".Ensure that the metric names and labels used in PromQL queries match exactly with those generated by OpenTelemetry.","histogram_quantile(0.95, rate(http_server_request_duration_seconds_bucket[5m]))","rate(robot_distance_traveled[5m]);rate(robot_distance_traveled_millimeters_total[5m])","expr: timestamp(node_time_nanoseconds) - (1e-9 * node_time_nanoseconds) >  5","Units should be required to be part of the metric name. Without them, it is hard to write proper queries, write or read alerts e.g. in YAML, and build dashboards.","All dots should be changed to underscores when translating to Prometheus. That way, metric names match the format used by the rest of the Prometheus ecosystem."
"2024/05/24 8:31:17 AM AST","100-1,000","Technology","SRE","Somewhat familiar","Somewhat familiar","Expert","Expert","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Prometheus exporters (e.g. node_exporter);OpenTelemetry Metric Client Libraries;OpenTelemetry Trace Client Libraries;OpenTelemetry auto-instrumentation agents","OpenTelemetry Collector Prometheus receiver;OpenTelemetry Collector Simple Prometheus receiver;OpenTelemetry Collector Prometheus exporter;OpenTelemetry Collector Prometheus remote write exporter","The Prometheus Server;A Prometheus-compatible (or PromQL compatible) solution from a vendor","PromQL","Configured collection or routing of metrics","4","5","One of the biggest challenges we've faced using OpenTelemetry with Prometheus is obtaining valid latency values from the OpenTelemetry endpoint, as the values reported in Prometheus do not match those in Jaeger, making validation difficult. Additionally, we have struggled to implement effective alerting to Microsoft Teams using Prometheus Alertmanager because the OpenTelemetry data lacks the necessary span IDs and other required labels and fields. These issues have hindered our ability to accurately monitor and alert on system performance.","I would like to see improvements in the accuracy and consistency of latency values reported by the OpenTelemetry endpoint. Additionally, enhancing support for alerting integration with Prometheus Alertmanager, by ensuring the availability of necessary identifiers like span IDs and other required labels and fields in the OpenTelemetry data, would greatly improve our ability to monitor and alert on system performance effectively. We aiming to utilize OpenTelemetry to monitor our application endpoints and implement alerting functionality based on predefined latency thresholds. If any endpoint exceeds these defined latency values, we expect the system to trigger an alert to Microsoft Teams. This proactive approach will enable us to promptly identify and address issues related to specific application endpoints, ensuring optimal performance and user experience.","histogram_quantile(0.95, rate(http_server_request_duration_seconds_bucket[5m]))","rate(robot_distance_traveled[5m]);rate(robot_distance_traveled_millimeters_total[5m])","expr: timestamp(node_time_nanoseconds) - (1e-9 * node_time_nanoseconds) >  5","Units should be required to be part of the metric name. Without them, it is hard to write proper queries, write or read alerts e.g. in YAML, and build dashboards.","All dots should be changed to underscores when translating to Prometheus. That way, metric names match the format used by the rest of the Prometheus ecosystem."
"2024/05/24 8:33:15 AM AST","100-1,000","Technology","DevOps","Somewhat familiar","Somewhat familiar","Expert","Expert","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Prometheus exporters (e.g. node_exporter);OpenTelemetry Metric Client Libraries;OpenTelemetry Trace Client Libraries;OpenTelemetry auto-instrumentation agents","OpenTelemetry Collector Prometheus receiver;OpenTelemetry Collector Simple Prometheus receiver;OpenTelemetry Collector Prometheus exporter;OpenTelemetry Collector Prometheus remote write exporter","The Prometheus Server;A Prometheus-compatible (or PromQL compatible) solution from a vendor","PromQL","Configured collection or routing of metrics","4","5","One of the biggest challenges we've faced using OpenTelemetry with Prometheus is obtaining valid latency values from the OpenTelemetry endpoint, as the values reported in Prometheus do not match those in Jaeger, making validation difficult. Additionally, we have struggled to implement effective alerting to Microsoft Teams using Prometheus Alertmanager because the OpenTelemetry data lacks the necessary span IDs and other required labels and fields. These issues have hindered our ability to accurately monitor and alert on system performance.","I would like to see improvements in the accuracy and consistency of latency values reported by the OpenTelemetry endpoint. Additionally, enhancing support for alerting integration with Prometheus Alertmanager, by ensuring the availability of necessary identifiers like span IDs and other required labels and fields in the OpenTelemetry data, would greatly improve our ability to monitor and alert on system performance effectively. We aiming to utilize OpenTelemetry to monitor our application endpoints and implement alerting functionality based on predefined latency thresholds. If any endpoint exceeds these defined latency values, we expect the system to trigger an alert to Microsoft Teams. This proactive approach will enable us to promptly identify and address issues related to specific application endpoints, ensuring optimal performance and user experience.","histogram_quantile(0.95, rate(http_server_request_duration_seconds_bucket[5m]))","rate(robot_distance_traveled[5m]);rate(robot_distance_traveled_millimeters_total[5m])","expr: timestamp(node_time_nanoseconds) - (1e-9 * node_time_nanoseconds) >  5","Units should be required to be part of the metric name. Without them, it is hard to write proper queries, write or read alerts e.g. in YAML, and build dashboards.","All dots should be changed to underscores when translating to Prometheus. That way, metric names match the format used by the rest of the Prometheus ecosystem."
"2024/05/24 8:46:53 AM AST","100-1,000","Technology","SRE","Somewhat familiar","Somewhat familiar","Expert","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Prometheus exporters (e.g. node_exporter);OpenTelemetry Metric Client Libraries;OpenTelemetry Trace Client Libraries;OpenTelemetry auto-instrumentation agents","OpenTelemetry Collector Prometheus receiver;OpenTelemetry Collector Simple Prometheus receiver;OpenTelemetry Collector Prometheus exporter;OpenTelemetry Collector Prometheus remote write exporter","The Prometheus Server;A Prometheus-compatible (or PromQL compatible) solution from a vendor","PromQL","Configured collection or routing of metrics;Created or edited an alert","3","4","One of the biggest challenges we've faced using OpenTelemetry with Prometheus is obtaining valid latency values from the OpenTelemetry endpoint, as the values reported in Prometheus do not match those in Jaeger, making validation difficult. Additionally, we have struggled to implement effective alerting to Microsoft Teams using Prometheus Alertmanager because the OpenTelemetry data lacks the necessary span IDs and other required labels and fields. These issues have hindered our ability to accurately monitor and alert on system performance.","I would like to see improvements in the accuracy and consistency of latency values reported by the OpenTelemetry endpoint. Additionally, enhancing support for alerting integration with Prometheus Alertmanager, by ensuring the availability of necessary identifiers like span IDs and other required labels and fields in the OpenTelemetry data, would greatly improve our ability to monitor and alert on system performance effectively. We aiming to utilize OpenTelemetry to monitor our application endpoints and implement alerting functionality based on predefined latency thresholds. If any endpoint exceeds these defined latency values, we expect the system to trigger an alert to Microsoft Teams. This proactive approach will enable us to promptly identify and address issues related to specific application endpoints, ensuring optimal performance and user experience.","histogram_quantile(0.95, rate(http_server_request_duration_seconds_bucket[5m]))","rate(robot_distance_traveled[5m]);rate(robot_distance_traveled_millimeters_total[5m])","expr: timestamp(node_time_nanoseconds) - (1e-9 * node_time_nanoseconds) >  5","Units should be required to be part of the metric name. Without them, it is hard to write proper queries, write or read alerts e.g. in YAML, and build dashboards.","All dots should be changed to underscores when translating to Prometheus. That way, metric names match the format used by the rest of the Prometheus ecosystem."
"2024/05/24 8:55:47 AM AST","100-1,000","Technology","SRE","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Prometheus exporters (e.g. node_exporter);OpenTelemetry Metric Client Libraries;OpenTelemetry Trace Client Libraries;OpenTelemetry auto-instrumentation agents","OpenTelemetry Collector Prometheus receiver;OpenTelemetry Collector Simple Prometheus receiver;OpenTelemetry Collector Prometheus remote write exporter","The Prometheus Server;A Prometheus-compatible (or PromQL compatible) solution from a vendor","PromQL","Configured collection or routing of metrics","4","5","One of the biggest challenges we've faced using OpenTelemetry with Prometheus is obtaining valid latency values from the OpenTelemetry endpoint, as the values reported in Prometheus do not match those in Jaeger, making validation difficult. Additionally, we have struggled to implement effective alerting to Microsoft Teams using Prometheus Alertmanager because the OpenTelemetry data lacks the necessary span IDs and other required labels and fields. These issues have hindered our ability to accurately monitor and alert on system performance.","I would like to see improvements in the accuracy and consistency of latency values reported by the OpenTelemetry endpoint. Additionally, enhancing support for alerting integration with Prometheus Alertmanager, by ensuring the availability of necessary identifiers like span IDs and other required labels and fields in the OpenTelemetry data, would greatly improve our ability to monitor and alert on system performance effectively. We aiming to utilize OpenTelemetry to monitor our application endpoints and implement alerting functionality based on predefined latency thresholds. If any endpoint exceeds these defined latency values, we expect the system to trigger an alert to Microsoft Teams. This proactive approach will enable us to promptly identify and address issues related to specific application endpoints, ensuring optimal performance and user experience.","histogram_quantile(0.95, rate(http_server_request_duration_seconds_bucket[5m]))","rate(robot_distance_traveled[5m]);rate(robot_distance_traveled_millimeters_total[5m])","expr: timestamp(node_time_nanoseconds) - (1e-9 * node_time_nanoseconds) >  5","Units should be required to be part of the metric name. Without them, it is hard to write proper queries, write or read alerts e.g. in YAML, and build dashboards.","All dots should be changed to underscores when translating to Prometheus. That way, metric names match the format used by the rest of the Prometheus ecosystem."
"2024/05/25 1:02:01 AM AST","100-1,000","Technology","SRE","Expert","Somewhat familiar","Expert","Expert","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Prometheus Client Libraries;Prometheus exporters (e.g. node_exporter);OpenTelemetry Trace Client Libraries;OpenTelemetry auto-instrumentation agents","None of the Above","The Prometheus Server;An open-source prometheus backend (Thanos, Cortex, Grafana Mimir, etc.)","PromQL","Added a metric to an application;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert;Created or edited a recording rule","3","3","Mapping concepts ","GO SDK","histogram_quantile(0.95, rate(http_server_request_duration_seconds_bucket[5m]))","rate(robot_distance_traveled_millimeters_total[5m])","expr: timestamp(node_time_nanoseconds) - (1e-9 * node_time_nanoseconds) >  5","Units should be required to be part of the metric name. Without them, it is hard to write proper queries, write or read alerts e.g. in YAML, and build dashboards.","All dots should be changed to underscores when translating to Prometheus. That way, metric names match the format used by the rest of the Prometheus ecosystem."
"2024/05/25 11:36:31 AM AST","50-100","Technology","DevOps","Expert","Expert","Expert","Somewhat familiar","Expert","Expert","Expert","Somewhat familiar","Prometheus Client Libraries;Prometheus exporters (e.g. node_exporter);OpenTelemetry Metric Client Libraries;OpenTelemetry Trace Client Libraries;OpenTelemetry auto-instrumentation agents","OpenTelemetry Language SDK Prometheus exporters;OpenTelemetry Collector Prometheus remote write exporter;Prometheus Client OTLP export.;Prometheus Server OTLP ingestion","The Prometheus Server;An open-source prometheus backend (Thanos, Cortex, Grafana Mimir, etc.)","PromQL","Added a metric to an application;Configured collection or routing of metrics;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert","4","1","Mainly updating services to export OTLP metrics and not just prometheus metrics and the shift in mentality for pushing metrics to the OTEL Collector and then to Prometheus.","*  It would be great to have migration guides for Devs from prometheus client libraries over to opentelemetry
*  It would be great if Prometheus natively supported OTLP metrics using push based mechanisms without it being behind an experimental flag (using it in production so not a deal breaker) 
*  It would be great if Prometheus could receive OTLP metrics over GRPC
*  It would also be great if Prometheus could store OTLP metrics using the OTLP naming conventions","histogram_quantile(0.95, rate({""http.server.request.duration""}[5m]));histogram_quantile(0.95, rate({""http.server.request.duration_seconds""}[5m]));histogram_quantile(0.95, rate({""http.server.request.duration_seconds_bucket""}[5m]));histogram_quantile(0.95, rate({""http.server.request.duration_bucket""}[5m]));histogram_quantile(0.95, rate(http_server_request_duration_bucket[5m]));histogram_quantile(0.95, rate(http_server_request_duration_seconds_bucket[5m]))","rate({""robot.distance.traveled""}[5m]);rate({""robot.distance.traveled_millimeters""}[5m]);rate({""robot.distance.traveled_total""}[5m]);rate(robot_distance_traveled[5m])","expr: timestamp(node_time) - (1e-9 * node_time) >  5;expr: timestamp(node_time_nanoseconds) - (1e-9 * node_time_nanoseconds) >  5","Units should generally not be added to metric names. Instead, units should be separate metadata, like the metric description. If you need to know the units for queries in alerts and dashboards, you will go look them up.","I like the dots better, and am glad OpenTelemetry chose to use them in metric names, let’s make sure dots works better in Prometheus"
"2024/05/26 11:21:29 AM AST","0-50","Technology","Dev","Not at all familiar","Not at all familiar","Somewhat familiar","Not at all familiar","Somewhat familiar","Not at all familiar","Not at all familiar","Not at all familiar","Prometheus Client Libraries;Prometheus exporters (e.g. node_exporter)","None of the Above","An open-source prometheus backend (Thanos, Cortex, Grafana Mimir, etc.)","PromQL","Added a metric to an application","5","5","The architectural complexities with the difficulty to find the documentation explaining it.","The improved documentation itself.","histogram_quantile(0.95, rate(http_server_request_duration_seconds_bucket[5m]))","rate(robot_distance_traveled_millimeters_total[5m])","expr: timestamp({""node.time_nanoseconds""}) - (1e-9 * {""node.time_nanoseconds""}) >  5","Units should be required to be part of the metric name. Without them, it is hard to write proper queries, write or read alerts e.g. in YAML, and build dashboards.","All dots should be changed to underscores when translating to Prometheus. That way, metric names match the format used by the rest of the Prometheus ecosystem."
"2024/05/27 1:10:12 AM AST","0-50","Financial","Dev","Expert","Expert","Expert","Expert","Somewhat familiar","Expert","Somewhat familiar","Expert","OpenTelemetry Trace Client Libraries","None of the Above","The Prometheus Server","A different open source query language (specify what under Other)","Created or edited a dashboard for displaying metrics","1","1","Easy","Easy","histogram_quantile(0.95, rate({""http.server.request.duration_seconds_bucket""}[5m]))","rate(robot_distance_traveled[5m])","expr: timestamp(node_time) - (1e-9 * node_time) >  5","Units should generally not be added to metric names, but base units (seconds, meters, etc.) should be required.","All dots should be changed to underscores when translating to Prometheus. That way, metric names match the format used by the rest of the Prometheus ecosystem."
"2024/05/27 6:44:33 AM AST",">1,000","Manufacturing","DevOps","Somewhat familiar","Not at all familiar","Not at all familiar","Somewhat familiar","Expert","Somewhat familiar","Expert","Not at all familiar","OpenTelemetry Metric Client Libraries;OpenTelemetry Trace Client Libraries","OpenTelemetry Language SDK Prometheus exporters;OpenTelemetry Collector Prometheus remote write exporter;Prometheus Client OTLP export.","An open-source prometheus backend (Thanos, Cortex, Grafana Mimir, etc.)","PromQL","Added a metric to an application;Configured collection or routing of metrics;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert","2","4","Understanding the difference between resources and labels in prometheus","Nothing","histogram_quantile(0.95, rate({""http.server.request.duration""}[5m]))","rate({""robot.distance.traveled""}[5m])","expr: timestamp({""node.time""}) - (1e-9 * {""node.time""}) >  5","Units should generally not be added to metric names. Instead, units should be separate metadata, like the metric description. If you need to know the units for queries in alerts and dashboards, you will go look them up.","I like the dots better, and am glad OpenTelemetry chose to use them in metric names, let’s make sure dots works better in Prometheus"
"2024/05/29 12:19:58 AM AST",">1,000","Financial","Dev","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Not at all familiar","OpenTelemetry Metric Client Libraries;OpenTelemetry Trace Client Libraries;OpenTelemetry auto-instrumentation agents","OpenTelemetry Collector Prometheus remote write exporter","The Prometheus Server","PromQL","Added a metric to an application;Configured collection or routing of metrics;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics","2","3","Naming, conventions","Adopt make otel naming","histogram_quantile(0.95, rate({""http.server.request.duration""}[5m]))","rate({""robot.distance.traveled""}[5m])","expr: timestamp({""node.time""}) - (1e-9 * {""node.time""}) >  5","I don’t care, but don’t modify metric names.","I like the dots better, and am glad OpenTelemetry chose to use them in metric names, let’s make sure dots works better in Prometheus"
"2024/05/30 8:41:51 PM AST","0-50","Aerospace","Platform engineering","Expert","Expert","Expert","Expert","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Prometheus Client Libraries;Prometheus exporters (e.g. node_exporter);OpenTelemetry Metric Client Libraries;OpenTelemetry Trace Client Libraries;OpenTelemetry auto-instrumentation agents;Allowed on me jamshadbhtti@gmail.com","OpenTelemetry Language SDK Prometheus exporters;OpenTelemetry Language SDK Prometheus bridges;OpenTelemetry Collector Prometheus receiver;OpenTelemetry Collector Simple Prometheus receiver;OpenTelemetry Collector Prometheus exporter;OpenTelemetry Collector Prometheus remote write exporter;Prometheus Client OTLP export.;Prometheus Server OTLP ingestion;None of the Above","The Prometheus Server;An open-source prometheus backend (Thanos, Cortex, Grafana Mimir, etc.);A Prometheus-compatible (or PromQL compatible) solution from a vendor;A backend not associated with Prometheus, not compatible with PromQL","PromQL;SQL;A vendor-specific query language (specify what under Other);A different open source query language (specify what under Other);All members welcome anytime membership best work for the world","Added a metric to an application;Configured collection or routing of metrics;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert;Created or edited a recording rule","5","5","I'm sure you are welcome anytime membership best friend request on All member login","I'm jamshad bhatti call me wining price send me your contact information visa and tigat","histogram_quantile(0.95, rate({""http.server.request.duration""}[5m]));histogram_quantile(0.95, rate({""http.server.request.duration_seconds""}[5m]));histogram_quantile(0.95, rate({""http.server.request.duration_seconds_bucket""}[5m]));histogram_quantile(0.95, rate({""http.server.request.duration_bucket""}[5m]));histogram_quantile(0.95, rate(http_server_request_duration_bucket[5m]));histogram_quantile(0.95, rate(http_server_request_duration_seconds_bucket[5m]))","rate({""robot.distance.traveled""}[5m]);rate({""robot.distance.traveled_millimeters""}[5m]);rate({""robot.distance.traveled_millimeters_total""}[5m]);rate({""robot.distance.traveled_total""}[5m]);rate(robot_distance_traveled[5m]);rate(robot_distance_traveled_millimeters_total[5m])","expr: timestamp(node_time) - (1e-9 * node_time) >  5;expr: timestamp({""node.time""}) - (1e-9 * {""node.time""}) >  5;expr: timestamp(node_time_nanoseconds) - (1e-9 * node_time_nanoseconds) >  5;expr: timestamp({""node.time_nanoseconds""}) - (1e-9 * {""node.time_nanoseconds""}) >  5","Units should be required to be part of the metric name. Without them, it is hard to write proper queries, write or read alerts e.g. in YAML, and build dashboards.","I wish OpenTelemetry had chosen to use underscores to match Prometheus syntactic requirements, I believe this decision should be revisited, it’s worth the time and breaking existing OTel users."
"2024/05/30 8:46:00 PM AST","0-50","Technology","Platform engineering","Expert","Expert","Expert","Expert","Expert","Expert","Expert","Expert","Prometheus Client Libraries;Prometheus exporters (e.g. node_exporter);OpenTelemetry Metric Client Libraries;OpenTelemetry Trace Client Libraries;OpenTelemetry auto-instrumentation agents;Best work for the world","OpenTelemetry Language SDK Prometheus exporters;OpenTelemetry Language SDK Prometheus bridges;OpenTelemetry Collector Prometheus receiver;OpenTelemetry Collector Simple Prometheus receiver;OpenTelemetry Collector Prometheus exporter;OpenTelemetry Collector Prometheus remote write exporter;Prometheus Client OTLP export.;Prometheus Server OTLP ingestion;None of the Above","The Prometheus Server;An open-source prometheus backend (Thanos, Cortex, Grafana Mimir, etc.);A Prometheus-compatible (or PromQL compatible) solution from a vendor;A backend not associated with Prometheus, not compatible with PromQL","PromQL;SQL;A vendor-specific query language (specify what under Other);A different open source query language (specify what under Other);By the world travel me wining price","Added a metric to an application;Configured collection or routing of metrics;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert;Created or edited a recording rule","3","2","I'm sure you are welcome anytime membership but I am now money option me account some follow me on All member","Best work for the world travel","histogram_quantile(0.95, rate({""http.server.request.duration""}[5m]));histogram_quantile(0.95, rate({""http.server.request.duration_seconds""}[5m]));histogram_quantile(0.95, rate({""http.server.request.duration_seconds_bucket""}[5m]));histogram_quantile(0.95, rate({""http.server.request.duration_bucket""}[5m]));histogram_quantile(0.95, rate(http_server_request_duration_bucket[5m]));histogram_quantile(0.95, rate(http_server_request_duration_seconds_bucket[5m]))","rate({""robot.distance.traveled""}[5m]);rate({""robot.distance.traveled_millimeters""}[5m]);rate({""robot.distance.traveled_millimeters_total""}[5m]);rate({""robot.distance.traveled_total""}[5m]);rate(robot_distance_traveled[5m]);rate(robot_distance_traveled_millimeters_total[5m])","expr: timestamp(node_time) - (1e-9 * node_time) >  5;expr: timestamp({""node.time""}) - (1e-9 * {""node.time""}) >  5;expr: timestamp(node_time_nanoseconds) - (1e-9 * node_time_nanoseconds) >  5;expr: timestamp({""node.time_nanoseconds""}) - (1e-9 * {""node.time_nanoseconds""}) >  5","Units should be required to be part of the metric name. Without them, it is hard to write proper queries, write or read alerts e.g. in YAML, and build dashboards.","All dots should be changed to underscores when translating to Prometheus. That way, metric names match the format used by the rest of the Prometheus ecosystem."
"2024/05/31 4:55:41 PM AST","100-1,000","Technology","Platform engineering","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Somewhat familiar","Expert","Expert","OpenTelemetry Metric Client Libraries;OpenTelemetry Trace Client Libraries;OpenTelemetry auto-instrumentation agents","OpenTelemetry Collector Prometheus remote write exporter","The Prometheus Server","PromQL","Added a metric to an application;Configured collection or routing of metrics;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics","4","3","Initial implementation of the operator with target allocator","Semantic convention broader adoption","histogram_quantile(0.95, rate({""http.server.request.duration""}[5m]))","rate({""robot.distance.traveled_total""}[5m])","expr: timestamp({""node.time""}) - (1e-9 * {""node.time""}) >  5","Units should generally not be added to metric names. Instead, units should be separate metadata, like the metric description. If you need to know the units for queries in alerts and dashboards, you will go look them up.","I like the dots better, and am glad OpenTelemetry chose to use them in metric names, let’s make sure dots works better in Prometheus"
"2024/05/31 10:54:48 PM AST",">1,000","Technology","Observability","Expert","Expert","Expert","Expert","Somewhat familiar","Somewhat familiar","Expert","Somewhat familiar","Prometheus Client Libraries;Prometheus exporters (e.g. node_exporter);OpenTelemetry Metric Client Libraries;OpenTelemetry Trace Client Libraries;OpenTelemetry auto-instrumentation agents","OpenTelemetry Language SDK Prometheus exporters;OpenTelemetry Language SDK Prometheus bridges;OpenTelemetry Collector Prometheus receiver;OpenTelemetry Collector Simple Prometheus receiver;OpenTelemetry Collector Prometheus exporter;OpenTelemetry Collector Prometheus remote write exporter;Prometheus Client OTLP export.;Prometheus Server OTLP ingestion","An open-source prometheus backend (Thanos, Cortex, Grafana Mimir, etc.)","PromQL;SQL","Added a metric to an application;Configured collection or routing of metrics;Written a live (ad-hoc) query over metrics;Created or edited a dashboard for displaying metrics;Created or edited an alert;Created or edited a recording rule","3","3","Documentation and API ","REST API's","histogram_quantile(0.95, rate({""http.server.request.duration""}[5m]));histogram_quantile(0.95, rate(http_server_request_duration_seconds_bucket[5m]))","rate({""robot.distance.traveled""}[5m]);rate(robot_distance_traveled_millimeters_total[5m])","expr: timestamp(node_time) - (1e-9 * node_time) >  5;expr: timestamp(node_time_nanoseconds) - (1e-9 * node_time_nanoseconds) >  5","Units should generally not be added to metric names. Instead, units should be separate metadata, like the metric description. If you need to know the units for queries in alerts and dashboards, you will go look them up.","All dots should be changed to underscores when translating to Prometheus. That way, metric names match the format used by the rest of the Prometheus ecosystem."